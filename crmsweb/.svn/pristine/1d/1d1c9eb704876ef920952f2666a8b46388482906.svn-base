package com.crms.dao.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.hibernate.Criteria;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Property;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.hibernate.query.Query;
import org.springframework.stereotype.Repository;

import com.crms.constant.CRMSConstant;
import com.crms.dao.PatientDao;
import com.crms.model.Patient;
import com.crms.model.PatientHistory;
import com.crms.util.CRMSUtil;
import com.crms.util.HibernateDaoUtil;

@Repository
public class PatientDaoImpl extends HibernateDaoUtil implements PatientDao{

	@Override
	public boolean save(Patient entity) {
		beginHibernateTransaction();
		 try {		 
			 session.save(entity);
			 tx.commit();
			 txnIsSuccess = true;
		 } catch (Exception e) {
			 tx.rollback();
			 e.printStackTrace();
		 } finally {
			closeHibernateSession(session);
		 }
		 return txnIsSuccess;
	}

	@Override
	public boolean update(Patient entity) {
		beginHibernateTransaction();
		 try {
			 session.update(entity);
			 tx.commit();
			 txnIsSuccess = true;
		 } catch (Exception e) {
			 tx.rollback();
			 e.printStackTrace();
		 } finally {
			closeHibernateSession(session);
		 }
		 return txnIsSuccess;
	}

	@Override
	public boolean delete(Patient entity) {
		beginHibernateTransaction();
		 try {
			 session.update(entity);
			 tx.commit();
			 txnIsSuccess = true;
		 } catch (Exception e) {
			 tx.rollback();
			 e.printStackTrace();
		 } finally {
			closeHibernateSession(session);
		 }
		 return txnIsSuccess;
	}

	@Override
	public Map<Object, Object> findByPatientNo(Map<Object, Object> mapCriteria) {
		
		Map<Object, Object> mapResult = new HashMap<Object, Object>();
		beginHibernateTransaction();
		try {
//			@SuppressWarnings("rawtypes")
//			Query query = session.createQuery("from PatientEntity where patientNo like concat('%',:patientNo,'%') and active = true");
//			query.setParameter("patientNo", criteria);
//			@SuppressWarnings("unchecked")
//			List<PatientEntity> list = (List<PatientEntity>) query.list();
			
			@SuppressWarnings("deprecation")
//			Criteria crit = session.createCriteria(PatientEntity.class);
////			crit.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
//			crit.add(Restrictions.ilike("patientNo", "%"+criteria+"%"));
//			crit.add(Restrictions.eqOrIsNull("active", true));
//			crit.addOrder(Property.forName("lastName").asc());
//			crit.setFirstResult(0);
//			crit.setMaxResults(5); //still testing and not accurate
//
//			List<PatientEntity> list = crit.list();
			
			//test code esd
//			DetachedCriteria dc = DetachedCriteria.forClass(PatientEntity.class);
//			dc.add(Restrictions.ilike("patientNo", "%"+criteria+"%"));
//			dc.add(Restrictions.eqOrIsNull("active", true));
//			dc.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
////			dc.setProjection(Projections.id());
//			//then create outer query
//			Criteria outer = session.createCriteria(PatientEntity.class);
//			outer.add(Subqueries.propertyIn("id", dc));
//			outer.setFirstResult(0);
//			outer.setMaxResults(5);
////			
////			
//			List<PatientEntity> list = outer.list();
			
			//Get the search criteria
			String searchCriteria = (String) mapCriteria.get("search_criteria");
			int recordStart = (Integer) mapCriteria.get("record_start");
			int maxResult = (Integer) mapCriteria.get("max_result");
			
			//Hibernate 5 below...
			CriteriaBuilder builder = session.getCriteriaBuilder();
			CriteriaQuery<Patient> query = builder.createQuery(Patient.class);
			Root<Patient> root = query.from(Patient.class);
			query.select(root);
			//query.select(root.get("patientNo")); //This is for selecting specific columns/fields
//			query.where(builder.and(builder.like(root.get("patientNo"), "%" + criteria + "%"), builder.equal(root.get("active"), true)));
			//or can use predicates
			List<Predicate> predicates = new ArrayList<>();
			predicates.add(
					builder.and(
							builder.like(builder.lower(root.get("patientNo")), "%" + searchCriteria.toLowerCase() + "%"),
							builder.equal(root.get("active"), true)));
//			predicates.add(builder.and(builder.equal(root.get("lastName"), "David"))); //can add more criteria
			query.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
			query.orderBy(builder.asc(root.get("lastName")), builder.asc(root.get("firstName")), builder.asc(root.get("middleName")));
			
			
			Query<Patient> q = session.createQuery(query);
			q.setFirstResult(recordStart); //Index start at 0 (first record)
			q.setMaxResults(maxResult);
			List<Patient> list2 = q.list();
			
//			Set<PatientHistoryEntity> phSet = new HashSet<>();
//			for (PatientEntity p: list2) {
//				phSet =  p.getPatientHistoryRecords();	//LAZY Fetch
//				if (!phSet.isEmpty()) {
//					break;
//				}
//			}
//			System.out.println(phSet.size());
			
			//Get totalRecordsCount for pagination
			CriteriaQuery<Long> queryCount = builder.createQuery(Long.class);
			queryCount.select(builder.count(queryCount.from(Patient.class)));
			queryCount.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
			Query<Long> qCount = session.createQuery(queryCount);
			long totalNoOfRecords = qCount.getSingleResult();
			
			if (!list2.isEmpty()) {
				mapResult.put("resultList", list2);
			}
			
			mapResult.put("noOfPages", CRMSUtil.getTotalNoOfPages(totalNoOfRecords)); //need to query in hibernate total no of records / pagination size
			
		 } catch (Exception e) {
			 e.printStackTrace();
		 } finally {
			closeHibernateSession(session);
		 }
		return mapResult;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Patient> getAllEntity() {
		List<Patient> list = null;
		beginHibernateTransaction();
		try {
			list = session.createQuery("from Patient").list();
		 } catch (Exception e) {

		 } finally {
			closeHibernateSession(session);
		 }
		return list;
	}

	@Override
	public Patient findById(int criteria) {
		Patient model = null;
		beginHibernateTransaction();
		try {
			model = session.get(Patient.class, criteria);
		
			//code below for calling namedquery setup in entity/model for function/stored procedure
//			Query query = session.getNamedQuery("callRetrievePatientFunction")
//						.setParameter("id", criteria);
//				List result = query.list();
//				for (Object obj: result) {
//					model = (PatientEntity) obj;
//				}
		
		} catch (Exception e) {
			e.printStackTrace();
		 } finally {
			closeHibernateSession(session);
		 }
		return model;
	}
	
	//Sample like
//	Session session = HibernateUtil.getSessionFactory().openSession();
//    Query query = session.createQuery("FROM Student WHERE studentName like concat('%',:studentName,'%')");
//    query.setParameter("studentName", likeStudentName);
//    List&lt;Student&gt; list = query.list();
//    if(list.size()==0)
//        return null;
//    return list;
	
}
