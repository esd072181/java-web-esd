package com.crms.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.ModelAndView;

import com.crms.bo.LabExamBo;
import com.crms.bo.PatientBillBo;
import com.crms.bo.PatientBillPaymentBo;
import com.crms.bo.PatientConsultationBo;
import com.crms.bo.PatientLabExamBo;
import com.crms.bo.ProfessionalBo;
import com.crms.constant.CRMSConstant;
import com.crms.model.LabExam;
import com.crms.model.ListValue;
import com.crms.model.Patient;
import com.crms.model.PatientBill;
import com.crms.model.PatientBillPayment;
import com.crms.model.PatientLabExam;
import com.crms.model.PatientConsultation;
import com.crms.model.UserAccount;
import com.crms.propertyeditor.CustomSQLDateEditor;
import com.crms.util.CRMSUtil;
import com.crms.util.ReportUtils;

@Controller
@SessionAttributes(value =  {"userid","roleid"})
public class PatientConsultationController {
	
	private final static Logger logger = Logger.getLogger(PatientConsultationController.class);
	
	@Autowired
	private PatientConsultationBo patientConsultationBo;
	@Autowired
	private PatientBillBo patientBillBo;
	@Autowired
	private PatientBillPaymentBo patientBillPaymentBo;
	@Autowired
	private LabExamBo labExamBo;
	@Autowired
	private PatientLabExamBo patientLabExamBo;
	@Autowired
	private ProfessionalBo professionalBo;
	@Autowired
	private ServletContext context;
	
	@InitBinder
	protected void initBinder(WebDataBinder binder) {
		
        CustomSQLDateEditor dateEditor = new CustomSQLDateEditor(null, true);
        binder.registerCustomEditor(Date.class, dateEditor);
	    		
	}
		
	@RequestMapping("/goToSearchPatientConsultation")
	public ModelAndView goToSearchPatientConsultation(ModelMap model) {
		
		if (!CRMSUtil.isUserSessionValid(model)) {
			logger.info(CRMSConstant.USER_INVALID_SESSION);
			return new ModelAndView("security/login", "userAccount", new UserAccount());	
		}
		
		model.addAttribute("searchFlag", false);
		return new ModelAndView("transaction/patientconsultation/searchPatientConsultation", "patient", new Patient());
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping("/searchPatientConsultation")
	public ModelAndView searchPatientConsultation(@RequestParam("page") String page, @ModelAttribute("patient") Patient patient, 
    			BindingResult result, ModelMap model) throws Exception {
		
		if (!CRMSUtil.isUserSessionValid(model)) {
			logger.info(CRMSConstant.USER_INVALID_SESSION);
			return new ModelAndView("security/login", "userAccount", new UserAccount());	
		}
		
		Map<Object,Object> mapCriteria = new HashMap<Object,Object>();
		
		mapCriteria.put("search_criteria", patient.getLastName()!=null ? patient.getLastName() : "");
		mapCriteria.put("record_start", CRMSUtil.getRecordStartIndex(page!=null ? Integer.parseInt(page) : 1));
		mapCriteria.put("max_result", CRMSConstant.RECORDS_PER_PAGE);
		
		Map<Object,Object> resultMap = patientConsultationBo.findByName(mapCriteria);
		
		List<PatientConsultation> resultList = (List<PatientConsultation>) resultMap.get("resultList");
		Integer noOfPages = (Integer) resultMap.get("noOfPages");
		
		boolean gotRecords = resultList!=null && resultList.size() > 0 ? true : false;
		
		model.addAttribute("resultList", resultList);
		model.addAttribute("searchFlag", true);
		model.addAttribute("gotRecords", gotRecords);
		model.addAttribute("currentPage", page);
		model.addAttribute("noOfPages", noOfPages);
		
		return new ModelAndView("transaction/patientconsultation/searchPatientConsultation", "patient", patient);
	}
	
	@RequestMapping("/goToViewPatientConsultation")
	public ModelAndView goToViewPatientConsultation(@RequestParam("consultId") String consultId, @ModelAttribute("patient") Patient patient,
    			BindingResult result, ModelMap model) throws Exception {
		
		if (!CRMSUtil.isUserSessionValid(model)) {
			logger.info(CRMSConstant.USER_INVALID_SESSION);
			return new ModelAndView("security/login", "userAccount", new UserAccount());	
		}
		
		PatientConsultation patientConsultation = patientConsultationBo.findById(Integer.parseInt(consultId));
		
		//get lab exam list
		List<LabExam> labExamList = labExamBo.getAllEntity();
		model.addAttribute("labExamList", labExamList);
		
		return new ModelAndView("transaction/patientconsultation/viewPatientConsultation", "patientConsultation", patientConsultation);
	}
	
	@RequestMapping("/goToPayNow")
	public ModelAndView goToPayNow(@RequestParam("consultId") String consultId, @ModelAttribute("patientConsultation") PatientConsultation patientConsultation,
    			BindingResult result, ModelMap model) throws Exception {
		
		if (!CRMSUtil.isUserSessionValid(model)) {
			logger.info(CRMSConstant.USER_INVALID_SESSION);
			return new ModelAndView("security/login", "userAccount", new UserAccount());	
		}
		
		boolean transactStatus = false;
		
		//Create Payment record in PaymentBillPayment table
		PatientBill billModel = patientBillBo.getPatientBill(Integer.parseInt(consultId)); 
		PatientBillPayment payment = new PatientBillPayment();
		payment.setPatientBill(billModel);
		payment.setAmount(billModel.getTotalBill());//Default to TotalBill
		payment.setModeOfPayment(401);//Default to Cash
		payment.setCreatedBy(CRMSUtil.getUserIdFromSession(model));
			
		if (patientBillPaymentBo.save(payment)) {
			//update the Patient Bill cleared to true
			PatientBill bill = payment.getPatientBill();
			bill.setCleared(true);
			bill.setModifiedBy(CRMSUtil.getUserIdFromSession(model));
			if (patientBillBo.update(bill)) {
				//Update payment status in Patient Lab Request table
				patientConsultation = patientConsultationBo.findById(Integer.parseInt(consultId));
				patientConsultation.setPaymentStatus(new ListValue(302));//Paid
				patientConsultation.setModifiedBy(CRMSUtil.getUserIdFromSession(model));
				transactStatus = patientConsultationBo.update(patientConsultation);
			}
		}
		
		//update to the latest model of lab request
		patientConsultation = patientConsultationBo.findById(Integer.parseInt(consultId));
		
		List<LabExam> labExamList = new ArrayList<>(); //pass blank list after payment
		model.addAttribute("labExamList", labExamList);
		model.addAttribute("isUpdated", transactStatus);
		
		return new ModelAndView("transaction/patientconsultation/viewPatientConsultation", "patientConsultation", patientConsultation);
	}

	@RequestMapping("/addNewLabExam")
	public ModelAndView addNewLabExam(@RequestParam("consultId") String consultId, @RequestParam("labExamId") String labExamId,
			@ModelAttribute("patientConsultation") PatientConsultation patientConsultation, BindingResult result, ModelMap model) throws Exception {
		
		if (!CRMSUtil.isUserSessionValid(model)) {
			logger.info(CRMSConstant.USER_INVALID_SESSION);
			return new ModelAndView("security/login", "userAccount", new UserAccount());	
		}
		
		boolean transactStatus = false;
		
		LabExam exam = labExamBo.findById(Integer.parseInt(labExamId));
		
		PatientLabExam modelLabexam = new PatientLabExam();
		modelLabexam.setPatientConsultation(patientConsultationBo.findById(Integer.parseInt(consultId)));
		modelLabexam.setLabExam(exam);
		modelLabexam.setQty(1);//default to 1
		modelLabexam.setFee(exam.getFee());
		modelLabexam.setAmount(exam.getFee());
		modelLabexam.setCreatedBy(CRMSUtil.getUserIdFromSession(model));
				
		//need to udpate the bill record
		if (patientLabExamBo.save(modelLabexam)) {
			
			//update to the latest model of lab request - to get the new added labexam
			patientConsultation = patientConsultationBo.findById(Integer.parseInt(consultId));
			
			//compute total lab exam fee
			PatientBill billModel = patientBillBo.getPatientBill(Integer.parseInt(consultId)); 
			billModel.setTotalLabExamFee(patientConsultation.getTotalAmount());
			billModel.setTotalBill(billModel.getTotalLabExamFee());
			billModel.setDateProcessed(new java.sql.Timestamp(System.currentTimeMillis()));
			billModel.setModifiedBy(CRMSUtil.getUserIdFromSession(model)); 
			
			transactStatus = patientBillBo.update(billModel);
		}
		
		//get lab exam list
		List<LabExam> labExamList = labExamBo.getAllEntity();
		model.addAttribute("labExamList", labExamList);
		model.addAttribute("isUpdated", transactStatus);
		
		return new ModelAndView("transaction/patientconsultation/viewPatientConsultation", "patientConsultation", patientConsultation);
	}

	@RequestMapping("/deletePatientLabExam")
	public ModelAndView deletePatientLabExam(@RequestParam("consultId") String consultId, @RequestParam("patientLabExamId") String patientLabExamId,
			@ModelAttribute("patientConsultation") PatientConsultation patientConsultation, BindingResult result, ModelMap model) throws Exception {
		
		if (!CRMSUtil.isUserSessionValid(model)) {
			logger.info(CRMSConstant.USER_INVALID_SESSION);
			return new ModelAndView("security/login", "userAccount", new UserAccount());	
		}
		
		boolean transactStatus = false;
		
		PatientLabExam pLabExam = patientLabExamBo.findById(Integer.parseInt(patientLabExamId));
		pLabExam.setModifiedBy(CRMSUtil.getUserIdFromSession(model));
		
		if (patientLabExamBo.delete(pLabExam)) {

			//need to udpate the bill record
			//update to the latest model of lab request - to get the new added labexam
			patientConsultation = patientConsultationBo.findById(Integer.parseInt(consultId));
			
			//compute total lab exam fee
			PatientBill billModel = patientBillBo.getPatientBill(Integer.parseInt(consultId)); 
			billModel.setTotalLabExamFee(patientConsultation.getTotalAmount());
			billModel.setTotalBill(billModel.getTotalLabExamFee());
			billModel.setDateProcessed(new java.sql.Timestamp(System.currentTimeMillis()));
			billModel.setModifiedBy(CRMSUtil.getUserIdFromSession(model));
			
			transactStatus = patientBillBo.update(billModel);
		}
		
		//get lab exam list
		List<LabExam> labExamList = labExamBo.getAllEntity();
		model.addAttribute("labExamList", labExamList);
		model.addAttribute("isUpdated", transactStatus);
		
		return new ModelAndView("transaction/patientconsultation/viewPatientConsultation", "patientConsultation", patientConsultation);
	}

	@RequestMapping("/releaseLabExamResult")
	public ModelAndView releaseLabExamResult(@RequestParam("consultId") String consultId ,@ModelAttribute("patientConsultation") PatientConsultation patientConsultation, 
			BindingResult result, ModelMap model) throws Exception {
		
		if (!CRMSUtil.isUserSessionValid(model)) {
			logger.info(CRMSConstant.USER_INVALID_SESSION);
			return new ModelAndView("security/login", "userAccount", new UserAccount());	
		}
		
		boolean transactStatus = false;
		
		patientConsultation = patientConsultationBo.findById(Integer.parseInt(consultId));
		patientConsultation.setStatus(new ListValue(202));//Released
		patientConsultation.setModifiedBy(CRMSUtil.getUserIdFromSession(model));
			 
		transactStatus = patientConsultationBo.update(patientConsultation);
		
		List<LabExam> labExamList = new ArrayList<>(); //pass blank list after releasing
		model.addAttribute("labExamList", labExamList);
		model.addAttribute("isUpdated", transactStatus);
		
		patientConsultation = patientConsultationBo.findById(Integer.parseInt(consultId));//get the latest updated status
		
		return new ModelAndView("transaction/patientconsultation/viewPatientConsultation", "patientConsultation", patientConsultation);
	}
	
//	//template	
//	@RequestMapping("/goToReportTemplate")
//	public ModelAndView goToReportTemplate(@RequestParam("patientLabExamId") String patientLabExamId, @RequestParam("consultId") String consultId,
//				@ModelAttribute("patientConsultation") PatientConsultation patientConsultation, @RequestParam("templateId") String templateId,
//    			BindingResult result, ModelMap model) throws Exception {
//		
//		if (!CRMSUtil.isUserSessionValid(model)) {
//			logger.info(CRMSConstant.USER_INVALID_SESSION);
//			return new ModelAndView("security/login", "userAccount", new UserAccount());	
//		}
//		
//		patientConsultation = patientConsultationBo.findById(Integer.parseInt(consultId));
//		
//		PatientLabExam patientLabExam = new PatientLabExam();
//		for (PatientLabExam item: patientConsultation.getPatientLabExamRecords()) {
//			if (Integer.parseInt(patientLabExamId) == item.getId()) {
//				patientLabExam = item;
//				break;
//			}
//		}
//		
//		ModelAndView mv = new ModelAndView();
//		
//		switch(Integer.parseInt(templateId)) {
//			case 501: //BloodChem 
//				mv.setViewName("transaction/patientconsultation/template/bloodChem"); 
//				//retrieve data here
//				PatientBloodChem patientBloodChem = patientBloodChemBo.findByPatientLabExamId(patientLabExam.getId());
//				mv.addObject("patientBloodChem", patientBloodChem!=null ? patientBloodChem : new PatientBloodChem());
//				break;
//			case 502: //Urinalysis 
//				mv.setViewName("transaction/patientconsultation/template/urinalysis"); 
//				//retrieve data here
//				PatientUrinalysis patientUrinalysis = patientUrinalysisBo.findByPatientLabExamId(patientLabExam.getId());
//				mv.addObject("patientUrinalysis", patientUrinalysis!=null ? patientUrinalysis : new PatientUrinalysis());
//				break;
//			case 503: //Fecalysis 
//				mv.setViewName("transaction/patientconsultation/template/fecalysis"); 
//				//retrieve data here
//				PatientFecalysis patientFecalysis = patientFecalysisBo.findByPatientLabExamId(patientLabExam.getId());
//				mv.addObject("patientFecalysis", patientFecalysis!=null ? patientFecalysis : new PatientFecalysis());
//				break;
//			case 504: //Hematology
//				mv.setViewName("transaction/patientconsultation/template/hematology"); 
//				//retrieve data here
//				PatientHematology patientHematology = patientHematologyBo.findByPatientLabExamId(patientLabExam.getId());
//				mv.addObject("patientHematology", patientHematology!=null ? patientHematology : new PatientHematology());
//				break;
//			case 505: //Miscellaneous
//				mv.setViewName("transaction/patientconsultation/template/misc"); 
//				//retrieve data here
//				PatientMisc patientMisc = patientMiscBo.findByPatientLabExamId(patientLabExam.getId());
//				mv.addObject("patientMisc", patientMisc!=null ? patientMisc : new PatientMisc());
//				//get the lab exam name
//				mv.addObject("labExamName", patientLabExam.getLabExam().getDescription());
//				break;				
//			default: ;
//		}
//		
//		mv.addObject("isReleased", patientConsultation.getStatus().getId()==202 ? true : false);
//		mv.addObject("patientLabExamId", patientLabExamId);
//		mv.addObject("patientConsultation", patientConsultation);
//		mv.addObject("professionalList", professionalBo.getAllNonPhysician());
//		
//		return mv;
//	}
	
//	 @RequestMapping("/showLabExamReport")
//	 public void showLabExamReport(@RequestParam("templateId") String templateId, @RequestParam("patientLabExamIdParam") String patientLabExamIdParam,
//			 @RequestParam("labReqNo") String labReqNo, HttpServletResponse response) throws Exception {
//			
//		StringBuilder fileName = new StringBuilder();
//		fileName.append(CRMSConstant.PDF_REPORT_ORIG_PATH);
//			switch(Integer.parseInt(templateId)) {
//			case 501: //BloodChem 
//				fileName.append(CRMSConstant.PDF_BLOODCHEM_REPORT);
//				break;
//			case 502: //Urinalysis 
//				fileName.append(CRMSConstant.PDF_URINALYSIS_REPORT);
//				break;
//			case 503: //Fecalysis 
//				fileName.append(CRMSConstant.PDF_FECALYSIS_REPORT);
//				break;
//			case 504: //Hematology
//				fileName.append(CRMSConstant.PDF_HEMATOLOGY_REPORT);
//				break;
//			case 505: //Miscellaneous
//				fileName.append(CRMSConstant.PDF_MISC_REPORT);
//				break;
//			default: ;
//		}
//		fileName.append(labReqNo);
//		fileName.append("_");
//		fileName.append(patientLabExamIdParam);
//		fileName.append(".pdf");
//		 
//		File pdfFile = new File(fileName.toString());
//		 
//		try {
//		        OutputStream os = response.getOutputStream();
//		        byte[] buf = new byte[8192];
//		        InputStream is = new FileInputStream(pdfFile);
//		        int c = 0;
//		        while ((c = is.read(buf, 0, buf.length)) > 0) {
//		            os.write(buf, 0, c);
//		            os.flush();
//		        }
//		        os.close();
//		        is.close();
//		    } catch (IOException e) {
//		        e.printStackTrace();
//		    }
//	  }

}
