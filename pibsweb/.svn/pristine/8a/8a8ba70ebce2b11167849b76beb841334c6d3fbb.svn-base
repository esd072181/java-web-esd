package com.pibs.form;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

import com.pibs.constant.ActionConstant;
import com.pibs.constant.MapConstant;
import com.pibs.constant.ModuleConstant;
import com.pibs.constant.ParamConstant;
import com.pibs.model.Admission;
import com.pibs.model.Billing;
import com.pibs.model.BillingDiscount;
import com.pibs.model.BillingPayment;
import com.pibs.model.MonitorAdditionalServices;
import com.pibs.model.MonitorEquipment;
import com.pibs.model.MonitorLaboratoryExamination;
import com.pibs.model.MonitorMedicalSupply;
import com.pibs.model.MonitorRadiology;
import com.pibs.model.MonitorSurgery;
import com.pibs.service.ServiceManager;
import com.pibs.service.ServiceManagerImpl;
import com.pibs.util.DateUtils;
import com.pibs.util.PIBSUtils;

public class BillingPaymentFormBean extends PIBSFormBean {

	private static final long serialVersionUID = 1L;
	
	private int patientCaseSystemId;
	private int billingId; //id in Patient Bill table
	//model list
	private List<MonitorLaboratoryExamination> labExamList;
	private List<MonitorMedicalSupply> medSupplyList;
	private List<MonitorRadiology> radiologyList;
	private List<MonitorSurgery> surgeryList;
	private List<MonitorAdditionalServices> additionalServicesList;
	private List<MonitorEquipment> equipmentList;
	private List<BillingDiscount> discountList;
	
	//total
	private String totalAmtLabExam;
	private String totalAmtMedSupply;
	private String totalAmtRadiology;
	private String totalAmtSurgery;
	private String totalAmtAddServices;
	private String totalAmtEquip;
	private String totalAmtDiscount;
	private String totalAmtRoom;
	private String totalAmtDoctor;
	private String totalAmtFee;
	private String totalAmtDue;
	
	//room and doctor details
	private String daysAdmitted;
	private String roomRate;
	private String doctorFee;
	
	private List<Double> totalList = new ArrayList<>();
	private List<Double> deductList = new ArrayList<>();
	
	private Billing modelBilling;
	
	private String totalAmtCash;
	private String totalAmtChange;
	private BillingPayment model;
	
	private boolean transactionStatus;
	private String transactionMessage;
	
	public BillingPaymentFormBean() {}

	
	
	
	public BillingPayment getModel() {
		return model;
	}




	public void setModel(BillingPayment model) {
		this.model = model;
	}




	public String getTotalAmtCash() {
		return totalAmtCash;
	}




	public void setTotalAmtCash(String totalAmtCash) {
		this.totalAmtCash = totalAmtCash;
	}




	public String getTotalAmtChange() {
		return totalAmtChange;
	}




	public void setTotalAmtChange(String totalAmtChange) {
		this.totalAmtChange = totalAmtChange;
	}




	public boolean isTransactionStatus() {
		return transactionStatus;
	}




	public void setTransactionStatus(boolean transactionStatus) {
		this.transactionStatus = transactionStatus;
	}




	public String getTransactionMessage() {
		return transactionMessage;
	}




	public void setTransactionMessage(String transactionMessage) {
		this.transactionMessage = transactionMessage;
	}




	public int getBillingId() {
		return billingId;
	}




	public void setBillingId(int billingId) {
		this.billingId = billingId;
	}




	public Billing getModelBilling() {
		return modelBilling;
	}




	public void setModelBilling(Billing modelBilling) {
		this.modelBilling = modelBilling;
	}




	public String getTotalAmtFee() {
		return totalAmtFee;
	}




	public void setTotalAmtFee(String totalAmtFee) {
		this.totalAmtFee = totalAmtFee;
	}




	public String getTotalAmtDue() {
		return totalAmtDue;
	}




	public void setTotalAmtDue(String totalAmtDue) {
		this.totalAmtDue = totalAmtDue;
	}




	public List<Double> getTotalList() {
		return totalList;
	}




	public void setTotalList(List<Double> totalList) {
		this.totalList = totalList;
	}




	public List<Double> getDeductList() {
		return deductList;
	}




	public void setDeductList(List<Double> deductList) {
		this.deductList = deductList;
	}




	public String getDaysAdmitted() {
		return daysAdmitted;
	}




	public void setDaysAdmitted(String daysAdmitted) {
		this.daysAdmitted = daysAdmitted;
	}




	public String getRoomRate() {
		return roomRate;
	}




	public void setRoomRate(String roomRate) {
		this.roomRate = roomRate;
	}




	public String getDoctorFee() {
		return doctorFee;
	}




	public void setDoctorFee(String doctorFee) {
		this.doctorFee = doctorFee;
	}




	public String getTotalAmtLabExam() {
		return totalAmtLabExam;
	}




	public String getTotalAmtRoom() {
		return totalAmtRoom;
	}


	public void setTotalAmtRoom(String totalAmtRoom) {
		this.totalAmtRoom = totalAmtRoom;
	}


	public String getTotalAmtDoctor() {
		return totalAmtDoctor;
	}


	public void setTotalAmtDoctor(String totalAmtDoctor) {
		this.totalAmtDoctor = totalAmtDoctor;
	}


	public void setTotalAmtLabExam(String totalAmtLabExam) {
		this.totalAmtLabExam = totalAmtLabExam;
	}




	public List<BillingDiscount> getDiscountList() {
		return discountList;
	}




	public void setDiscountList(List<BillingDiscount> discountList) {
		this.discountList = discountList;
	}




	public String getTotalAmtDiscount() {
		return totalAmtDiscount;
	}




	public void setTotalAmtDiscount(String totalAmtDiscount) {
		this.totalAmtDiscount = totalAmtDiscount;
	}

	
	public int getPatientCaseSystemId() {
		return patientCaseSystemId;
	}




	public void setPatientCaseSystemId(int patientCaseSystemId) {
		this.patientCaseSystemId = patientCaseSystemId;
	}




	public List<MonitorLaboratoryExamination> getLabExamList() {
		return labExamList;
	}




	public void setLabExamList(List<MonitorLaboratoryExamination> labExamList) {
		this.labExamList = labExamList;
	}




	public List<MonitorMedicalSupply> getMedSupplyList() {
		return medSupplyList;
	}




	public void setMedSupplyList(List<MonitorMedicalSupply> medSupplyList) {
		this.medSupplyList = medSupplyList;
	}




	public List<MonitorRadiology> getRadiologyList() {
		return radiologyList;
	}




	public void setRadiologyList(List<MonitorRadiology> radiologyList) {
		this.radiologyList = radiologyList;
	}




	public List<MonitorSurgery> getSurgeryList() {
		return surgeryList;
	}




	public void setSurgeryList(List<MonitorSurgery> surgeryList) {
		this.surgeryList = surgeryList;
	}




	public List<MonitorAdditionalServices> getAdditionalServicesList() {
		return additionalServicesList;
	}




	public void setAdditionalServicesList(
			List<MonitorAdditionalServices> additionalServicesList) {
		this.additionalServicesList = additionalServicesList;
	}




	public List<MonitorEquipment> getEquipmentList() {
		return equipmentList;
	}




	public void setEquipmentList(List<MonitorEquipment> equipmentList) {
		this.equipmentList = equipmentList;
	}	
	

	
	public String getTotalAmtMedSupply() {
		return totalAmtMedSupply;
	}




	public void setTotalAmtMedSupply(String totalAmtMedSupply) {
		this.totalAmtMedSupply = totalAmtMedSupply;
	}




	public String getTotalAmtRadiology() {
		return totalAmtRadiology;
	}




	public void setTotalAmtRadiology(String totalAmtRadiology) {
		this.totalAmtRadiology = totalAmtRadiology;
	}




	public String getTotalAmtSurgery() {
		return totalAmtSurgery;
	}




	public void setTotalAmtSurgery(String totalAmtSurgery) {
		this.totalAmtSurgery = totalAmtSurgery;
	}




	public String getTotalAmtAddServices() {
		return totalAmtAddServices;
	}




	public void setTotalAmtAddServices(String totalAmtAddServices) {
		this.totalAmtAddServices = totalAmtAddServices;
	}




	public String getTotalAmtEquip() {
		return totalAmtEquip;
	}




	public void setTotalAmtEquip(String totalAmtEquip) {
		this.totalAmtEquip = totalAmtEquip;
	}



	@Override
	public ActionErrors validate(ActionMapping mapping,
			HttpServletRequest request) {
		// TODO Auto-generated method stub
		
		String command = (String) request.getParameter("command"); 
		
		ActionErrors errors = new ActionErrors();
		if (command!=null && (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE))) {
			
			double totalAmtDue = PIBSUtils.convertStrToDouble(this.getTotalAmtDue());
			double totalAmtcash = Double.valueOf(this.getTotalAmtCash());
			
			if (totalAmtDue>totalAmtcash) {
				errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage("tran.paymentinsufficient.req"));
			} else {
				setTotalAmtChange(PIBSUtils.convertDoubleToStr(totalAmtcash-totalAmtDue));
			}
			
		}


		return errors;
	}


	public void getLaboratoryExaminationDetails() throws Exception {	
		
		MonitorLaboratoryExamination model = new MonitorLaboratoryExamination();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_LABORATORY_EXAMINATION);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorLaboratoryExamination> rsList = (List<MonitorLaboratoryExamination>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setLabExamList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorLaboratoryExamination item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtLabExam(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getMedicalSupplyDetails() throws Exception {	
		
		MonitorMedicalSupply model = new MonitorMedicalSupply();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_MEDICAL_SUPPLY);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorMedicalSupply> rsList = (List<MonitorMedicalSupply>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setMedSupplyList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorMedicalSupply item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtMedSupply(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getRadiologyDetails() throws Exception {	
		
		MonitorRadiology model = new MonitorRadiology();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_RADIOLOGY);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorRadiology> rsList = (List<MonitorRadiology>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setRadiologyList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorRadiology item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtRadiology(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getSurgeryDetails() throws Exception {	
		
		MonitorSurgery model = new MonitorSurgery();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_SURGERY);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorSurgery> rsList = (List<MonitorSurgery>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setSurgeryList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorSurgery item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtSurgery(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getAdditionalServicesDetails() throws Exception {	
		
		MonitorAdditionalServices model = new MonitorAdditionalServices();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_ADDITIONAL_SERVICES);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorAdditionalServices> rsList = (List<MonitorAdditionalServices>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setAdditionalServicesList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorAdditionalServices item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtAddServices(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getEquipmentDetails() throws Exception {	
		
		MonitorEquipment model = new MonitorEquipment();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_EQUIPMENT);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorEquipment> rsList = (List<MonitorEquipment>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setEquipmentList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorEquipment item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtEquip(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}
	
	public void getDiscountDetails() throws Exception {	
		
		BillingDiscount model = new BillingDiscount();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.BILLING_DISCOUNT);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<BillingDiscount> rsList = (List<BillingDiscount>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setDiscountList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (BillingDiscount item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getDeductList().add(totalAmt);
	        	setTotalAmtDiscount(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}
	
	//room and doctor's fee
	public void computeRoomAndDoctorFee() throws Exception {	
		//fetch the patient admission details
		Admission model = new Admission();
		model.setId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.ADMISSION);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA_BY_PATIENT_CASE_SYS_ID);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        model = (Admission) resultMap.get(MapConstant.CLASS_DATA);	
	        //get the admission date
	        Timestamp dateFromTs = new Timestamp(model.getDateOfCase().getTime());
	        java.util.Date dateFrom = DateUtils.getUtilDateFromSQLTimestamp(dateFromTs);
	        //get current date
	        Timestamp dateToTs = new Timestamp(System.currentTimeMillis());
	        java.util.Date dateTo = DateUtils.getUtilDateFromSQLTimestamp(dateToTs);
	        int daysAdmitted = PIBSUtils.daysBetweenUsingJoda(dateFrom,dateTo);
	        //get the room rate and compute room fee
	        double totalAmtRoomFee = daysAdmitted * model.getRoomFee().doubleValue();
	        setTotalAmtRoom(PIBSUtils.convertDoubleToStr(totalAmtRoomFee));
	        //get the doctor rate and compute doctor fee
	        double totalAmtDoctorFee = daysAdmitted * model.getDoctorFee().doubleValue();
	        setTotalAmtDoctor(PIBSUtils.convertDoubleToStr(totalAmtDoctorFee));
	        //set the details
	        getTotalList().add(totalAmtRoomFee);
	        getTotalList().add(totalAmtDoctorFee);
	        setDaysAdmitted(String.valueOf(daysAdmitted));
	        setRoomRate(PIBSUtils.convertDoubleToStr(model.getRoomFee().doubleValue()));
	        setDoctorFee(PIBSUtils.convertDoubleToStr(model.getDoctorFee().doubleValue()));
        }
		
	}

	//Total Amt Due
	public void computeTotalAmtDue() throws Exception {	
		//compute the total
		double totalAmt = 0;
		for (Double item: getTotalList()) {
			totalAmt += item;
		}
		setTotalAmtFee(PIBSUtils.convertDoubleToStr(totalAmt));
		//compute the total deductions
		double totalAmtDeduct = 0;
		for (Double item: getDeductList()) {
			totalAmtDeduct += item;
		}//need to study this if need to create a new variable like totalAmtFee
		
		//compute the tax here
		//and subtract to the amount due --- pending
		
		setTotalAmtDue(PIBSUtils.convertDoubleToStr(totalAmt-totalAmtDeduct));
		
	}

	public void populateModel(BillingPaymentFormBean formbean) throws Exception {
		BillingPayment model = new BillingPayment();
		model.setBillingId(formbean.getBillingId());
		if (formbean.getTotalAmtDue()!=null) {
			model.setAmount(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtDue())));		
		}
		model.setModeOfPayment(1101);//default to cash code
		setModel(model);
	}
	
	
	public void populateModelBilling (BillingPaymentFormBean formbean) throws Exception {
		Billing model = new Billing();
		model.setPatientCaseSystemid(formbean.getPatientCaseSystemId());
		if (formbean.getTotalAmtLabExam()!=null) {
			model.setTotalLaboratoryExamFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtLabExam())));		
		}
		if (formbean.getTotalAmtMedSupply()!=null) {
			model.setTotalMedsupplyFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtMedSupply())));
		}
		if (formbean.getTotalAmtRadiology()!=null) {
			model.setTotalRadiologyFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtRadiology())));
		}
		if (formbean.getTotalAmtSurgery()!=null) {
			model.setTotalSurgeryFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtSurgery())));
		}
		if (formbean.getTotalAmtAddServices()!=null) {
			model.setTotalAdditionalServicesFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtAddServices())));
		}
		if (formbean.getTotalAmtEquip()!=null) {
			model.setTotalEquipmentFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtEquip())));
		}
		if (formbean.getTotalAmtRoom()!=null) {
			model.setTotalRoomFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtRoom())));		
		}
		if (formbean.getTotalAmtDoctor()!=null) {
			model.setTotalDoctorFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtDoctor())));
		}
		if (formbean.getTotalAmtFee()!=null) {
			model.setTotalFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtFee())));
		}
		if (formbean.getTotalAmtDiscount()!=null) {
			model.setTotalDiscountAmt(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtDiscount())));
		}
		//pending total tax amount
		if (formbean.getTotalAmtDiscount()!=null) {
			model.setTotalBill(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtDue())));
		}
		setModelBilling(model);
	}
	
	public void updateFormBeanForBillingId () throws Exception {
		HashMap<String, Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.BILLING);
        dataMap.put(MapConstant.CLASS_DATA, getModelBilling());
        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA);
	
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
        
        if (resultMap!=null && !resultMap.isEmpty()) {
        	Billing modelUpdated = (Billing) resultMap.get(MapConstant.CLASS_DATA);
        	if (modelUpdated.getId()>0) {
	        	populateFormBeanBilling(modelUpdated);
        	}
        }
	}
	
	public void populateFormBeanBilling (Billing model) throws Exception {
		setBillingId(model.getId()); //id in patient bill table
		setPatientCaseSystemId(model.getPatientCaseSystemid());
		if (model.getTotalLaboratoryExamFee()!=null) {
			setTotalAmtLabExam(PIBSUtils.convertDoubleToStr(model.getTotalLaboratoryExamFee().doubleValue()));
		}
		if (model.getTotalMedsupplyFee()!=null) {
			setTotalAmtMedSupply(PIBSUtils.convertDoubleToStr(model.getTotalMedsupplyFee().doubleValue()));
		}
		if (model.getTotalRadiologyFee()!=null) {
			setTotalAmtRadiology(PIBSUtils.convertDoubleToStr(model.getTotalRadiologyFee().doubleValue()));
		}
		if (model.getTotalSurgeryFee()!=null) {
			setTotalAmtSurgery(PIBSUtils.convertDoubleToStr(model.getTotalSurgeryFee().doubleValue()));
		}
		if (model.getTotalAdditionalServicesFee()!=null) {
			setTotalAmtAddServices(PIBSUtils.convertDoubleToStr(model.getTotalAdditionalServicesFee().doubleValue()));
		}
		if (model.getTotalRoomFee()!=null) {
			setTotalAmtRoom(PIBSUtils.convertDoubleToStr(model.getTotalRoomFee().doubleValue()));
		}
		if (model.getTotalDoctorFee()!=null) {
			setTotalAmtDoctor(PIBSUtils.convertDoubleToStr(model.getTotalDoctorFee().doubleValue()));
		}
		if (model.getTotalFee()!=null) {
			setTotalAmtFee(PIBSUtils.convertDoubleToStr(model.getTotalFee().doubleValue()));
		}
		if (model.getTotalDiscountAmt()!=null) {
			setTotalAmtDiscount(PIBSUtils.convertDoubleToStr(model.getTotalDiscountAmt().doubleValue()));
		}
		//pending total tax amount
		if (model.getTotalBill()!=null) {
			setTotalAmtDue(PIBSUtils.convertDoubleToStr(model.getTotalBill().doubleValue()));
		}
	}
	
	
}
