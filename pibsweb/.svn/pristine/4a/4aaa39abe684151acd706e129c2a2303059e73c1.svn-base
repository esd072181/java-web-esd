package com.pibs.form;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMapping;

import com.pibs.constant.ActionConstant;
import com.pibs.constant.MapConstant;
import com.pibs.constant.ModuleConstant;
import com.pibs.model.Admission;
import com.pibs.model.Billing;
import com.pibs.model.BillingDiscount;
import com.pibs.model.MonitorAdditionalServices;
import com.pibs.model.MonitorDoctor;
import com.pibs.model.MonitorEquipment;
import com.pibs.model.MonitorLaboratoryExamination;
import com.pibs.model.MonitorMedicalSupply;
import com.pibs.model.MonitorRadiology;
import com.pibs.model.MonitorRoom;
import com.pibs.model.MonitorRoomTransfer;
import com.pibs.model.MonitorSurgery;
import com.pibs.model.Patient;
import com.pibs.service.ServiceManager;
import com.pibs.service.ServiceManagerImpl;
import com.pibs.util.DateUtils;
import com.pibs.util.PIBSUtils;

public class BillingFormBean extends PIBSFormBean {


	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private int id; //patientcasesystemid
	private int billingId; //id in Patient Bill table
	
	private String criteria;
	private String category;
	private int noOfPages;
	private int currentPage;
	private List<Patient> modelList;
	
	private boolean transactionStatus;
	private String transactionMessage;
	
	private Admission admission;
	
	private String dateAdmitted;
	private String timeAdmitted;
	
	//total
	private String totalAmtLabExam;
	private String totalAmtMedSupply;
	private String totalAmtRadiology;
	private String totalAmtSurgery;
	private String totalAmtAddServices;
	private String totalAmtEquip;
	private String totalAmtOtherDoctor;
	private String totalAmtOtherRoom;
	private String totalAmtDiscount;
	private String totalAmtRoom;
	private String totalAmtDoctor;
	private String totalAmtFee;
	private String totalAmtDue;
	
	//room and doctor details
	private String daysAdmitted;
	private String roomRate;
	private String doctorFee;
	
	private List<Double> totalList = new ArrayList<>();
	private List<Double> deductList = new ArrayList<>();
	
	private Billing modelBilling;
	
	public BillingFormBean() {}

	
	
	public int getBillingId() {
		return billingId;
	}



	public void setBillingId(int billingId) {
		this.billingId = billingId;
	}



	public Billing getModelBilling() {
		return modelBilling;
	}



	public void setModelBilling(Billing modelBilling) {
		this.modelBilling = modelBilling;
	}



	public String getTotalAmtFee() {
		return totalAmtFee;
	}



	public void setTotalAmtFee(String totalAmtFee) {
		this.totalAmtFee = totalAmtFee;
	}



	public List<Double> getTotalList() {
		return totalList;
	}



	public void setTotalList(List<Double> totalList) {
		this.totalList = totalList;
	}



	public List<Double> getDeductList() {
		return deductList;
	}



	public void setDeductList(List<Double> deductList) {
		this.deductList = deductList;
	}



	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getCriteria() {
		return criteria;
	}

	public void setCriteria(String criteria) {
		this.criteria = criteria;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public int getNoOfPages() {
		return noOfPages;
	}

	public void setNoOfPages(int noOfPages) {
		this.noOfPages = noOfPages;
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}

	public List<Patient> getModelList() {
		return modelList;
	}

	public void setModelList(List<Patient> modelList) {
		this.modelList = modelList;
	}

	public boolean isTransactionStatus() {
		return transactionStatus;
	}

	public void setTransactionStatus(boolean transactionStatus) {
		this.transactionStatus = transactionStatus;
	}

	public String getTransactionMessage() {
		return transactionMessage;
	}

	public void setTransactionMessage(String transactionMessage) {
		this.transactionMessage = transactionMessage;
	}

	
	
	public String getDateAdmitted() {
		return dateAdmitted;
	}


	public void setDateAdmitted(String dateAdmitted) {
		this.dateAdmitted = dateAdmitted;
	}


	public String getTimeAdmitted() {
		return timeAdmitted;
	}


	public void setTimeAdmitted(String timeAdmitted) {
		this.timeAdmitted = timeAdmitted;
	}


	public void populatePatientAdmissionDetails(Admission model) throws Exception {
		admission = new Admission();
		admission.setId(model.getId());
		admission.setPatientId(model.getPatientId());
		admission.setLastName(model.getLastName());
		admission.setFirstName(model.getFirstName());
		admission.setMiddleName(model.getMiddleName());
		admission.setGender(model.getGender());
		admission.setPatientStatus(model.getPatientStatus());
		admission.setPatientType(model.getPatientType());
		admission.setCaseNo(model.getCaseNo());
		admission.setChiefComplaint(model.getChiefComplaint());
		admission.setRoomNo(model.getRoomNo());
		admission.setDoctor(model.getDoctor());
		admission.setDateOfCase(model.getDateOfCase());
		admission.setRoomNo(model.getRoomNo());
		admission.setDoctor(model.getDoctor());
		admission.setRoomNoTransfer(model.getRoomNoTransfer());
	}
	
	public Admission populateModel (BillingFormBean formbean) throws Exception {
		Admission model = new Admission();
		model.setId(formbean.getId());
		return model;
	}

	public Admission populateFormBean (Admission model) throws Exception {
		setId(model.getId());
		setDateAdmitted(DateUtils.getStrDateFromSQLTimestamp(model.getDateOfCase()));
		setTimeAdmitted(DateUtils.getStrTimeFromSQLTimestamp(model.getDateOfCase()));
		return model;
	}
	
	@Override
	public ActionErrors validate(ActionMapping mapping,
			HttpServletRequest request) {
		// TODO Auto-generated method stub
		ActionErrors errors = new ActionErrors();
		return errors;
	}
		
	public Admission getAdmission() {
		return admission;
	}

	public void setAdmission(Admission admission) {
		this.admission = admission;
	}
	
	public void getPatientAdmissionDetails() throws Exception {
		//fetch the patient admission details		
		Admission model = new Admission();
		model.setId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.ADMISSION);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        model = (Admission) resultMap.get(MapConstant.CLASS_DATA);		        		
        	this.populatePatientAdmissionDetails(model);
        	this.populateFormBean(model);
        }
	}


	public String getTotalAmtLabExam() {
		return totalAmtLabExam;
	}


	public void setTotalAmtLabExam(String totalAmtLabExam) {
		this.totalAmtLabExam = totalAmtLabExam;
	}


	public String getTotalAmtMedSupply() {
		return totalAmtMedSupply;
	}


	public void setTotalAmtMedSupply(String totalAmtMedSupply) {
		this.totalAmtMedSupply = totalAmtMedSupply;
	}


	public String getTotalAmtRadiology() {
		return totalAmtRadiology;
	}


	public void setTotalAmtRadiology(String totalAmtRadiology) {
		this.totalAmtRadiology = totalAmtRadiology;
	}


	public String getTotalAmtSurgery() {
		return totalAmtSurgery;
	}


	public void setTotalAmtSurgery(String totalAmtSurgery) {
		this.totalAmtSurgery = totalAmtSurgery;
	}


	public String getTotalAmtAddServices() {
		return totalAmtAddServices;
	}


	public void setTotalAmtAddServices(String totalAmtAddServices) {
		this.totalAmtAddServices = totalAmtAddServices;
	}


	public String getTotalAmtEquip() {
		return totalAmtEquip;
	}


	public void setTotalAmtEquip(String totalAmtEquip) {
		this.totalAmtEquip = totalAmtEquip;
	}


	public String getTotalAmtDiscount() {
		return totalAmtDiscount;
	}


	public void setTotalAmtDiscount(String totalAmtDiscount) {
		this.totalAmtDiscount = totalAmtDiscount;
	}


	public String getTotalAmtRoom() {
		return totalAmtRoom;
	}


	public void setTotalAmtRoom(String totalAmtRoom) {
		this.totalAmtRoom = totalAmtRoom;
	}


	public String getTotalAmtDoctor() {
		return totalAmtDoctor;
	}


	public void setTotalAmtDoctor(String totalAmtDoctor) {
		this.totalAmtDoctor = totalAmtDoctor;
	}


	public String getDaysAdmitted() {
		return daysAdmitted;
	}


	public void setDaysAdmitted(String daysAdmitted) {
		this.daysAdmitted = daysAdmitted;
	}


	public String getRoomRate() {
		return roomRate;
	}


	public void setRoomRate(String roomRate) {
		this.roomRate = roomRate;
	}


	public String getDoctorFee() {
		return doctorFee;
	}


	public void setDoctorFee(String doctorFee) {
		this.doctorFee = doctorFee;
	}

	
	public String getTotalAmtDue() {
		return totalAmtDue;
	}


	public void setTotalAmtDue(String totalAmtDue) {
		this.totalAmtDue = totalAmtDue;
	}


	public void getLaboratoryExaminationDetails() throws Exception {	
		
		MonitorLaboratoryExamination model = new MonitorLaboratoryExamination();
		model.setPatientCaseSystemId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_LABORATORY_EXAMINATION);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorLaboratoryExamination> rsList = (List<MonitorLaboratoryExamination>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorLaboratoryExamination item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtLabExam(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getMedicalSupplyDetails() throws Exception {	
		
		MonitorMedicalSupply model = new MonitorMedicalSupply();
		model.setPatientCaseSystemId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_MEDICAL_SUPPLY);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorMedicalSupply> rsList = (List<MonitorMedicalSupply>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorMedicalSupply item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtMedSupply(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getRadiologyDetails() throws Exception {	
		
		MonitorRadiology model = new MonitorRadiology();
		model.setPatientCaseSystemId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_RADIOLOGY);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorRadiology> rsList = (List<MonitorRadiology>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorRadiology item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtRadiology(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getSurgeryDetails() throws Exception {	
		
		MonitorSurgery model = new MonitorSurgery();
		model.setPatientCaseSystemId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_SURGERY);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorSurgery> rsList = (List<MonitorSurgery>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorSurgery item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtSurgery(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getAdditionalServicesDetails() throws Exception {	
		
		MonitorAdditionalServices model = new MonitorAdditionalServices();
		model.setPatientCaseSystemId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_ADDITIONAL_SERVICES);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorAdditionalServices> rsList = (List<MonitorAdditionalServices>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorAdditionalServices item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtAddServices(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getEquipmentDetails() throws Exception {	
		
		MonitorEquipment model = new MonitorEquipment();
		model.setPatientCaseSystemId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_EQUIPMENT);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorEquipment> rsList = (List<MonitorEquipment>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorEquipment item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtEquip(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	
	public void getDiscountDetails() throws Exception {	
		
		BillingDiscount model = new BillingDiscount();
		model.setPatientCaseSystemId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.BILLING_DISCOUNT);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<BillingDiscount> rsList = (List<BillingDiscount>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (BillingDiscount item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getDeductList().add(totalAmt);
	        	setTotalAmtDiscount(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}
	
	//room fee
	public void computeRoomFee() throws Exception {	
		//fetch the patient admission details
		Admission model = new Admission();
		model.setId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.ADMISSION);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA_BY_PATIENT_CASE_SYS_ID);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
        	
	        model = (Admission) resultMap.get(MapConstant.CLASS_DATA);
	        
	        MonitorRoomTransfer modelInner = new MonitorRoomTransfer();
	        modelInner.setPatientCaseSystemId(model.getId());
        	
        	//check first if got room transfer
        	dataMap.clear();
        	dataMap = null;
        	dataMap = new HashMap<String, Object>();
            dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_ROOM_TRANSFER);
            dataMap.put(MapConstant.CLASS_DATA, modelInner);
            dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA_BY_PATIENT_CASE_SYS_ID);
            
            Map<String, Object> resultMapInner = service.executeRequest(dataMap);
        	
            if (resultMapInner!=null && !resultMapInner.isEmpty()) {
            	double totalAmtRoomFee = 0.00;
            	int daysAdmittedTotal = 0;
            	//With Room Transfer data (multiple allowed)
            	@SuppressWarnings("unchecked")
				List<MonitorRoomTransfer> rsList = (List<MonitorRoomTransfer>) resultMapInner.get(MapConstant.CLASS_LIST); 
            	for (int x=0;x<rsList.size();x++) {
            		MonitorRoomTransfer modelItem = (MonitorRoomTransfer) rsList.get(x);
            		if (x==0) {
            	        //compute 2 data, first one and room transfer
            			//get the admission date
            			//First Data
            			Timestamp dateFromTs = new Timestamp(modelItem.getDateAdmitted().getTime());
            			java.util.Date dateFrom = DateUtils.getUtilDateFromSQLTimestamp(dateFromTs); 
            	        Timestamp dateToTs = new Timestamp(modelItem.getDateTransferred().getTime());
            	        java.util.Date dateTo = DateUtils.getUtilDateFromSQLTimestamp(dateToTs); 
            	        int daysAdmitted = PIBSUtils.daysBetweenUsingJoda(dateFrom,dateTo);
            	        //get the room rate and compute room fee
            	        double totalAmtRoomFeeOriginal = daysAdmitted * modelItem.getRoomRate().doubleValue();
            	        //Second data (transferred room)
            	        dateFromTs = new Timestamp(modelItem.getDateTransferred().getTime());
            	        dateFrom = DateUtils.getUtilDateFromSQLTimestamp(dateFromTs); 
            	        //check if last record
            	        Timestamp dateToTsTransfer = null;
            	        java.util.Date dateToTransfer = null;
            	        if (x+1 < rsList.size()) {
            	        	MonitorRoomTransfer modelItemNext = (MonitorRoomTransfer) rsList.get(x+1);
            	        	dateToTsTransfer = new Timestamp(modelItemNext.getDateTransferred().getTime());
            	        	dateToTransfer = DateUtils.getUtilDateFromSQLTimestamp(dateToTsTransfer);
            	        } else {
                        	//get current date
            	        	dateToTsTransfer = new Timestamp(System.currentTimeMillis());
                	        dateToTransfer = DateUtils.getUtilDateFromSQLTimestamp(dateToTsTransfer);
            	        }
            	        int daysAdmittedTransfer = PIBSUtils.daysBetweenUsingJoda(dateFrom,dateToTransfer);
            	      //get the room rate and compute room fee
            	        double totalAmtRoomFeeTransfer = daysAdmittedTransfer * modelItem.getRate().doubleValue();
            	        totalAmtRoomFee = totalAmtRoomFeeOriginal + totalAmtRoomFeeTransfer;
            	        daysAdmittedTotal = daysAdmitted + daysAdmittedTransfer;
            		} else {
            			//compute the transfer only
               	        //Second data (transferred room)
            			Timestamp dateFromTs = new Timestamp(modelItem.getDateTransferred().getTime());
            			java.util.Date dateFrom = DateUtils.getUtilDateFromSQLTimestamp(dateFromTs); 
            	        //check if last record
            	        Timestamp dateToTsTransfer = null;
            	        java.util.Date dateToTransfer = null;
            	        if (x+1 < rsList.size()) {
            	        	MonitorRoomTransfer modelItemNext = (MonitorRoomTransfer) rsList.get(x+1);
            	        	dateToTsTransfer = new Timestamp(modelItemNext.getDateTransferred().getTime());
            	        	dateToTransfer = DateUtils.getUtilDateFromSQLTimestamp(dateToTsTransfer);
            	        } else {
                        	//get current date
            	        	dateToTsTransfer = new Timestamp(System.currentTimeMillis());
                	        dateToTransfer = DateUtils.getUtilDateFromSQLTimestamp(dateToTsTransfer);
            	        }
            	        int daysAdmittedTransfer = PIBSUtils.daysBetweenUsingJoda(dateFrom,dateToTransfer);
            	        //get the room rate and compute room fee
            	        double totalAmtRoomFeeTransfer = daysAdmittedTransfer * modelItem.getRate().doubleValue();
            	        totalAmtRoomFee += totalAmtRoomFeeTransfer;
            	        daysAdmittedTotal += daysAdmittedTransfer;
            		}
            	}
            	setTotalAmtRoom(PIBSUtils.convertDoubleToStr(totalAmtRoomFee));
    	        //set the details
    	        getTotalList().add(totalAmtRoomFee);
    	        setDaysAdmitted(String.valueOf(daysAdmittedTotal));
    	        setRoomRate(PIBSUtils.convertDoubleToStr(model.getRoomFee().doubleValue()));
            } else {
            	//For No Room Transfer data
    	        //get the admission date
    	        Timestamp dateFromTs = new Timestamp(model.getDateOfCase().getTime());
    	        java.util.Date dateFrom = DateUtils.getUtilDateFromSQLTimestamp(dateFromTs);
    	        //get current date
    	        Timestamp dateToTs = new Timestamp(System.currentTimeMillis());
    	        java.util.Date dateTo = DateUtils.getUtilDateFromSQLTimestamp(dateToTs);
    	        int daysAdmitted = PIBSUtils.daysBetweenUsingJoda(dateFrom,dateTo);
    	        //get the room rate and compute room fee
    	        double totalAmtRoomFee = daysAdmitted * model.getRoomFee().doubleValue();
    	        setTotalAmtRoom(PIBSUtils.convertDoubleToStr(totalAmtRoomFee));
    	        //set the details
    	        getTotalList().add(totalAmtRoomFee);
    	        setDaysAdmitted(String.valueOf(daysAdmitted));
    	        setRoomRate(PIBSUtils.convertDoubleToStr(model.getRoomFee().doubleValue()));
            }
        	
        }
		
	}
	
	public void getOtherRoomDetails() throws Exception {	
		
		MonitorRoom model = new MonitorRoom();
		model.setPatientCaseSystemId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_ROOM);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorRoom> rsList = (List<MonitorRoom>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorRoom item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtOtherRoom(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	//doctor's fee
	public void computeDoctorFee() throws Exception {	
		//fetch the patient admission details
		Admission model = new Admission();
		model.setId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.ADMISSION);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA_BY_PATIENT_CASE_SYS_ID);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        model = (Admission) resultMap.get(MapConstant.CLASS_DATA);
	        //get the doctor rate and compute doctor fee
	        double totalAmtDoctorFee = Integer.parseInt(getDaysAdmitted()) * model.getDoctorFee().doubleValue();
	        setTotalAmtDoctor(PIBSUtils.convertDoubleToStr(totalAmtDoctorFee));
	        //set the details
	        getTotalList().add(totalAmtDoctorFee);
	        setDoctorFee(PIBSUtils.convertDoubleToStr(model.getDoctorFee().doubleValue()));
        }
		
	}
	
	public void getOtherDoctorDetails() throws Exception {	
		
		MonitorDoctor model = new MonitorDoctor();
		model.setPatientCaseSystemId(getId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_DOCTOR);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorDoctor> rsList = (List<MonitorDoctor>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorDoctor item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtOtherDoctor(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	
	//Total Amt Due
	public void computeTotalAmtDue() throws Exception {	
		//compute the total
		double totalAmt = 0;
		for (Double item: getTotalList()) {
			totalAmt += item;
		}
		setTotalAmtFee(PIBSUtils.convertDoubleToStr(totalAmt));
		//compute the total deductions
		double totalAmtDeduct = 0;
		for (Double item: getDeductList()) {
			totalAmtDeduct += item;
		}//need to study this if need to create a new variable like totalAmtFee		
		
		//compute the tax here
		//and subtract to the amount due --- pending
		
		setTotalAmtDue(PIBSUtils.convertDoubleToStr(totalAmt-totalAmtDeduct));
	}



	public String getTotalAmtOtherDoctor() {
		return totalAmtOtherDoctor;
	}

	public void setTotalAmtOtherDoctor(String totalAmtOtherDoctor) {
		this.totalAmtOtherDoctor = totalAmtOtherDoctor;
	}



	public String getTotalAmtOtherRoom() {
		return totalAmtOtherRoom;
	}



	public void setTotalAmtOtherRoom(String totalAmtOtherRoom) {
		this.totalAmtOtherRoom = totalAmtOtherRoom;
	}
	
		
}
