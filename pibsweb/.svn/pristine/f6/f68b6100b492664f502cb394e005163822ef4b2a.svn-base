package com.pibs.service;

import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import com.pibs.config.SpringConfig;
import com.pibs.constant.BeanConstant;
import com.pibs.constant.MapConstant;
import com.pibs.constant.ModuleConstant;
import com.pibs.module.AdditionalServicesCategoryModule;
import com.pibs.module.AdditionalServicesModule;
import com.pibs.module.AdmissionModule;
import com.pibs.module.BuildingModule;
import com.pibs.module.DiagnosisModule;
import com.pibs.module.DiscountModule;
import com.pibs.module.EquipmentModule;
import com.pibs.module.LaboratoryExaminationModule;
import com.pibs.module.ListTypeModule;
import com.pibs.module.ListValueModule;
import com.pibs.module.LoginModule;
import com.pibs.module.MedicalSupplyModule;
import com.pibs.module.PIBSModule;
import com.pibs.module.PatientModule;
import com.pibs.module.ProfessionalModule;
import com.pibs.module.ProfessionalTypeModule;
import com.pibs.module.RoomCategoryModule;
import com.pibs.module.RoomModule;
import com.pibs.module.SpecializationModule;
import com.pibs.module.RadiologyModule;
import com.pibs.module.SurgeryModule;
import com.pibs.util.PIBSUtils;

public class ServiceManagerImpl implements ServiceManager {
	
	private final static Logger logger = Logger.getLogger(ServiceManagerImpl.class);
	
	public Map<String, Object> executeRequest(HashMap<String,Object> dataMap) throws Exception{
		
		PIBSModule module = null;
		Object bo = null;
		int moduleId = 0;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		
		try {
			moduleId = (int) dataMap.get(MapConstant.MODULE);
			
			bo = SpringConfig.getSpringXMLConfig().getBean(BeanConstant.getBeanId(moduleId));
			
			dataMap.put(MapConstant.BEAN, bo); //put object bean into dataMap
			
			switch(moduleId) {

				case ModuleConstant.LOGIN : 
					module = new LoginModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.BUILDING :
					module = new BuildingModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.ROOM_CATEGORY :
					module = new RoomCategoryModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.ROOM :
					module = new RoomModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.EQUIPMENT :
					module = new EquipmentModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.SPECIALIZATION :
					module = new SpecializationModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.ADDITIONAL_SERVICES :
					module = new AdditionalServicesModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.ADDITIONAL_SERVICES_CATEGORY :
					module = new AdditionalServicesCategoryModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.RADIOLOGY :
					module = new RadiologyModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.LABORATORY_EXAMINATION :
					module = new LaboratoryExaminationModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.MEDICAL_SUPPLY:
					module = new MedicalSupplyModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.PROFESSIONAL_TYPE:
					module = new ProfessionalTypeModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.SURGERY:
					module = new SurgeryModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.PROFESSIONAL:
					module = new ProfessionalModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.LIST_VALUE :
					module = new ListValueModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.LIST_TYPE :
					module = new ListTypeModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.DISCOUNT:
					module = new DiscountModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.PATIENT:
					module = new PatientModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.ADMISSION:
					module = new AdmissionModule();
					returnMap = module.executeRequest(dataMap);
					break;
				case ModuleConstant.DIAGNOSIS:
					module = new DiagnosisModule();
					returnMap = module.executeRequest(dataMap);
					break;
				default: 
					PIBSUtils.writeLogInfo(logger, "This module ("+module+") is not configured for service!");
					break;
			}
									
		} catch (Exception e) {
			PIBSUtils.writeLogInfo(logger, e.getMessage());
		} finally {
			if (module!=null) {
				module = null;	
			}
		}
		return returnMap;
	}
	
}
