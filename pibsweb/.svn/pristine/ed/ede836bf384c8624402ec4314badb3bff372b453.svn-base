package com.pibs.form;

import java.io.File;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;




import org.apache.log4j.Logger;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMapping;
import org.joda.time.Days;
import org.joda.time.LocalDate;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import com.pibs.constant.ActionConstant;
import com.pibs.constant.MapConstant;
import com.pibs.constant.MiscConstant;
import com.pibs.constant.ModuleConstant;
import com.pibs.model.Admission;
import com.pibs.model.Billing;
import com.pibs.model.BillingDiscount;
import com.pibs.model.BillingReport;
import com.pibs.model.MonitorAdditionalServices;
import com.pibs.model.MonitorDoctor;
import com.pibs.model.MonitorEquipment;
import com.pibs.model.MonitorLaboratoryExamination;
import com.pibs.model.MonitorMedicalSupply;
import com.pibs.model.MonitorRadiology;
import com.pibs.model.MonitorRoom;
import com.pibs.model.MonitorRoomTransfer;
import com.pibs.model.MonitorSurgery;
import com.pibs.model.User;
import com.pibs.service.ServiceManager;
import com.pibs.service.ServiceManagerImpl;
import com.pibs.util.DateUtils;
import com.pibs.util.PIBSUtils;
import com.pibs.util.ReportUtils;

public class BillingDetailsFormBean extends PIBSFormBean {
	
	private final static Logger logger = Logger.getLogger(BillingDetailsFormBean.class);

	private static final long serialVersionUID = 1L;
	
	private int patientCaseSystemId;
	private String caseNo;
	private int billingId; //id in Patient Bill table
	//model list
	private List<MonitorLaboratoryExamination> labExamList;
	private List<MonitorMedicalSupply> medSupplyList;
	private List<MonitorRadiology> radiologyList;
	private List<MonitorSurgery> surgeryList;
	private List<MonitorAdditionalServices> additionalServicesList;
	private List<MonitorEquipment> equipmentList;
	private List<MonitorDoctor> otherDoctorList;
	private List<MonitorRoom> otherRoomList;
	private List<BillingDiscount> discountList;
	
	//total
	private String totalAmtLabExam;
	private String totalAmtMedSupply;
	private String totalAmtRadiology;
	private String totalAmtSurgery;
	private String totalAmtAddServices;
	private String totalAmtEquip;
	private String totalAmtOtherDoctor;
	private String totalAmtOtherRoom;
	private String totalAmtDiscount;
	private String totalAmtRoom;
	private String totalAmtDoctor;
	private String totalAmtFee;
	private String totalAmtDue;
	
	//room and doctor details
	private String daysAdmitted;
	private String roomRate;
	private String doctorFee;
	
	private List<Double> totalList = new ArrayList<>();
	private List<Double> deductList = new ArrayList<>();
	
	private Billing modelBilling;
	
	private boolean transactionStatus;
	private String transactionMessage;
	
	//report
	List<BillingReport> billingReportList = new ArrayList<>();
	
	public BillingDetailsFormBean() {}

	
	
	
	public boolean isTransactionStatus() {
		return transactionStatus;
	}




	public void setTransactionStatus(boolean transactionStatus) {
		this.transactionStatus = transactionStatus;
	}




	public String getTransactionMessage() {
		return transactionMessage;
	}




	public void setTransactionMessage(String transactionMessage) {
		this.transactionMessage = transactionMessage;
	}




	public int getBillingId() {
		return billingId;
	}




	public void setBillingId(int billingId) {
		this.billingId = billingId;
	}




	public Billing getModelBilling() {
		return modelBilling;
	}




	public void setModelBilling(Billing modelBilling) {
		this.modelBilling = modelBilling;
	}




	public String getTotalAmtFee() {
		return totalAmtFee;
	}




	public void setTotalAmtFee(String totalAmtFee) {
		this.totalAmtFee = totalAmtFee;
	}




	public String getTotalAmtDue() {
		return totalAmtDue;
	}




	public void setTotalAmtDue(String totalAmtDue) {
		this.totalAmtDue = totalAmtDue;
	}




	public List<Double> getTotalList() {
		return totalList;
	}




	public void setTotalList(List<Double> totalList) {
		this.totalList = totalList;
	}




	public List<Double> getDeductList() {
		return deductList;
	}




	public void setDeductList(List<Double> deductList) {
		this.deductList = deductList;
	}




	public String getDaysAdmitted() {
		return daysAdmitted;
	}




	public void setDaysAdmitted(String daysAdmitted) {
		this.daysAdmitted = daysAdmitted;
	}




	public String getRoomRate() {
		return roomRate;
	}




	public void setRoomRate(String roomRate) {
		this.roomRate = roomRate;
	}




	public String getDoctorFee() {
		return doctorFee;
	}




	public void setDoctorFee(String doctorFee) {
		this.doctorFee = doctorFee;
	}




	public String getTotalAmtLabExam() {
		return totalAmtLabExam;
	}




	public String getTotalAmtRoom() {
		return totalAmtRoom;
	}


	public void setTotalAmtRoom(String totalAmtRoom) {
		this.totalAmtRoom = totalAmtRoom;
	}


	public String getTotalAmtDoctor() {
		return totalAmtDoctor;
	}


	public void setTotalAmtDoctor(String totalAmtDoctor) {
		this.totalAmtDoctor = totalAmtDoctor;
	}


	public void setTotalAmtLabExam(String totalAmtLabExam) {
		this.totalAmtLabExam = totalAmtLabExam;
	}




	public List<BillingDiscount> getDiscountList() {
		return discountList;
	}




	public void setDiscountList(List<BillingDiscount> discountList) {
		this.discountList = discountList;
	}




	public String getTotalAmtDiscount() {
		return totalAmtDiscount;
	}




	public void setTotalAmtDiscount(String totalAmtDiscount) {
		this.totalAmtDiscount = totalAmtDiscount;
	}

	
	public int getPatientCaseSystemId() {
		return patientCaseSystemId;
	}




	public void setPatientCaseSystemId(int patientCaseSystemId) {
		this.patientCaseSystemId = patientCaseSystemId;
	}




	public List<MonitorLaboratoryExamination> getLabExamList() {
		return labExamList;
	}




	public void setLabExamList(List<MonitorLaboratoryExamination> labExamList) {
		this.labExamList = labExamList;
	}




	public List<MonitorMedicalSupply> getMedSupplyList() {
		return medSupplyList;
	}




	public void setMedSupplyList(List<MonitorMedicalSupply> medSupplyList) {
		this.medSupplyList = medSupplyList;
	}




	public List<MonitorRadiology> getRadiologyList() {
		return radiologyList;
	}




	public void setRadiologyList(List<MonitorRadiology> radiologyList) {
		this.radiologyList = radiologyList;
	}




	public List<MonitorSurgery> getSurgeryList() {
		return surgeryList;
	}




	public void setSurgeryList(List<MonitorSurgery> surgeryList) {
		this.surgeryList = surgeryList;
	}




	public List<MonitorAdditionalServices> getAdditionalServicesList() {
		return additionalServicesList;
	}




	public void setAdditionalServicesList(
			List<MonitorAdditionalServices> additionalServicesList) {
		this.additionalServicesList = additionalServicesList;
	}




	public List<MonitorEquipment> getEquipmentList() {
		return equipmentList;
	}




	public void setEquipmentList(List<MonitorEquipment> equipmentList) {
		this.equipmentList = equipmentList;
	}	
	

	
	public String getTotalAmtMedSupply() {
		return totalAmtMedSupply;
	}




	public void setTotalAmtMedSupply(String totalAmtMedSupply) {
		this.totalAmtMedSupply = totalAmtMedSupply;
	}




	public String getTotalAmtRadiology() {
		return totalAmtRadiology;
	}




	public void setTotalAmtRadiology(String totalAmtRadiology) {
		this.totalAmtRadiology = totalAmtRadiology;
	}




	public String getTotalAmtSurgery() {
		return totalAmtSurgery;
	}




	public void setTotalAmtSurgery(String totalAmtSurgery) {
		this.totalAmtSurgery = totalAmtSurgery;
	}




	public String getTotalAmtAddServices() {
		return totalAmtAddServices;
	}




	public void setTotalAmtAddServices(String totalAmtAddServices) {
		this.totalAmtAddServices = totalAmtAddServices;
	}




	public String getTotalAmtEquip() {
		return totalAmtEquip;
	}




	public void setTotalAmtEquip(String totalAmtEquip) {
		this.totalAmtEquip = totalAmtEquip;
	}



	public String getCaseNo() {
		return caseNo;
	}




	public void setCaseNo(String caseNo) {
		this.caseNo = caseNo;
	}




	@Override
	public ActionErrors validate(ActionMapping mapping,
			HttpServletRequest request) {
		// TODO Auto-generated method stub
		ActionErrors errors = new ActionErrors();



		return errors;
	}


	public void getLaboratoryExaminationDetails() throws Exception {	
		
		MonitorLaboratoryExamination model = new MonitorLaboratoryExamination();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_LABORATORY_EXAMINATION);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorLaboratoryExamination> rsList = (List<MonitorLaboratoryExamination>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setLabExamList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorLaboratoryExamination item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        		//for report
	        		billingReportList.add(new BillingReport(item.getItemDescription(), "Lab Exam", 
	        				String.valueOf(item.getQty()), String.valueOf(item.getFee()), String.valueOf(item.getAmount())));
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtLabExam(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getMedicalSupplyDetails() throws Exception {	
		
		MonitorMedicalSupply model = new MonitorMedicalSupply();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_MEDICAL_SUPPLY);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorMedicalSupply> rsList = (List<MonitorMedicalSupply>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setMedSupplyList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorMedicalSupply item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        		//for report
	        		billingReportList.add(new BillingReport(item.getItemDescription(), "Medical Supply", 
	        				String.valueOf(item.getQty()), String.valueOf(item.getPrice()), String.valueOf(item.getAmount())));
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtMedSupply(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getRadiologyDetails() throws Exception {	
		
		MonitorRadiology model = new MonitorRadiology();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_RADIOLOGY);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorRadiology> rsList = (List<MonitorRadiology>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setRadiologyList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorRadiology item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        		//for report
	        		billingReportList.add(new BillingReport(item.getItemDescription(), "Radiology", 
	        				String.valueOf(item.getQty()), String.valueOf(item.getFee()), String.valueOf(item.getAmount())));
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtRadiology(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getSurgeryDetails() throws Exception {	
		
		MonitorSurgery model = new MonitorSurgery();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_SURGERY);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorSurgery> rsList = (List<MonitorSurgery>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setSurgeryList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorSurgery item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        		//for report
	        		billingReportList.add(new BillingReport(item.getItemDescription(), "Surgery", 
	        				String.valueOf(item.getQty()), String.valueOf(item.getFee()), String.valueOf(item.getAmount())));
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtSurgery(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getAdditionalServicesDetails() throws Exception {	
		
		MonitorAdditionalServices model = new MonitorAdditionalServices();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_ADDITIONAL_SERVICES);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorAdditionalServices> rsList = (List<MonitorAdditionalServices>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setAdditionalServicesList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorAdditionalServices item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        		//for report
	        		billingReportList.add(new BillingReport(item.getItemDescription(), "Additional Services", 
	        				String.valueOf(item.getQty()), String.valueOf(item.getFee()), String.valueOf(item.getAmount())));

	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtAddServices(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getEquipmentDetails() throws Exception {	
		
		MonitorEquipment model = new MonitorEquipment();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_EQUIPMENT);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorEquipment> rsList = (List<MonitorEquipment>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setEquipmentList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorEquipment item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        		//for report
	        		billingReportList.add(new BillingReport(item.getItemName(), "Equipment", 
	        				String.valueOf(item.getQty()), String.valueOf(item.getFee()), String.valueOf(item.getAmount())));
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtEquip(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}
	
	public void getDiscountDetails() throws Exception {	
		
		BillingDiscount model = new BillingDiscount();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.BILLING_DISCOUNT);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<BillingDiscount> rsList = (List<BillingDiscount>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setDiscountList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	billingReportList.add(new BillingReport("","","","",""));//Add Space
	        	for (BillingDiscount item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        		//for report
	        		billingReportList.add(new BillingReport(item.getDiscountDescription(), "", "", "", "-" + String.valueOf(item.getAmount())));
	        	}
	        	getDeductList().add(totalAmt);//add total amt to the list, List is used in case there are other deduction such as tax etc...
	        	setTotalAmtDiscount(PIBSUtils.convertDoubleToStrNegative(totalAmt));
	        }
        }
	}
	
	//room fee
	public void computeRoomFee() throws Exception {	
		//fetch the patient admission details
		Admission model = new Admission();
		model.setId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.ADMISSION);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA_BY_PATIENT_CASE_SYS_ID);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
        	
	        model = (Admission) resultMap.get(MapConstant.CLASS_DATA);
	        
	        MonitorRoomTransfer modelInner = new MonitorRoomTransfer();
	        modelInner.setPatientCaseSystemId(model.getId());
        	
        	//check first if got room transfer
        	dataMap.clear();
        	dataMap = null;
        	dataMap = new HashMap<String, Object>();
            dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_ROOM_TRANSFER);
            dataMap.put(MapConstant.CLASS_DATA, modelInner);
            dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA_BY_PATIENT_CASE_SYS_ID);
            
            Map<String, Object> resultMapInner = service.executeRequest(dataMap);
        	
            if (resultMapInner!=null && !resultMapInner.isEmpty()) {
            	double totalAmtRoomFee = 0.00;
            	int daysAdmittedTotal = 0;
            	//With Room Transfer data (multiple allowed)
            	@SuppressWarnings("unchecked")
				List<MonitorRoomTransfer> rsList = (List<MonitorRoomTransfer>) resultMapInner.get(MapConstant.CLASS_LIST); 
            	for (int x=0;x<rsList.size();x++) {
            		MonitorRoomTransfer modelItem = (MonitorRoomTransfer) rsList.get(x);
            		if (x==0) {
            	        //compute 2 data, first one and room transfer
            			//get the admission date
            			//First Data
            			Timestamp dateFromTs = new Timestamp(modelItem.getDateAdmitted().getTime());
            			java.util.Date dateFrom = DateUtils.getUtilDateFromSQLTimestamp(dateFromTs); 
            	        Timestamp dateToTs = new Timestamp(modelItem.getDateTransferred().getTime());
            	        java.util.Date dateTo = DateUtils.getUtilDateFromSQLTimestamp(dateToTs); 
            	        int daysAdmitted = PIBSUtils.daysBetweenUsingJoda(dateFrom,dateTo);
            	        //get the room rate and compute room fee
            	        double totalAmtRoomFeeOriginal = daysAdmitted * modelItem.getRoomRate().doubleValue();
            	       	billingReportList.add(new BillingReport("","","Days","Rate",""));//Add Header
                    	billingReportList.add(new BillingReport("Room",model.getRoomNo(),String.valueOf(daysAdmitted),PIBSUtils.convertDoubleToStrNoPhp(modelItem.getRoomRate().doubleValue()),String.valueOf(totalAmtRoomFeeOriginal)));//Room
            	        //Second data (transferred room)
            	        dateFromTs = new Timestamp(modelItem.getDateTransferred().getTime());
            	        dateFrom = DateUtils.getUtilDateFromSQLTimestamp(dateFromTs); 
            	        //check if last record
            	        Timestamp dateToTsTransfer = null;
            	        java.util.Date dateToTransfer = null;
            	        if (x+1 < rsList.size()) {
            	        	MonitorRoomTransfer modelItemNext = (MonitorRoomTransfer) rsList.get(x+1);
            	        	dateToTsTransfer = new Timestamp(modelItemNext.getDateTransferred().getTime());
            	        	dateToTransfer = DateUtils.getUtilDateFromSQLTimestamp(dateToTsTransfer);
            	        } else {
                        	//get current date
            	        	dateToTsTransfer = new Timestamp(System.currentTimeMillis());
                	        dateToTransfer = DateUtils.getUtilDateFromSQLTimestamp(dateToTsTransfer);
            	        }
            	        int daysAdmittedTransfer = PIBSUtils.daysBetweenUsingJoda(dateFrom,dateToTransfer);
            	      //get the room rate and compute room fee
            	        double totalAmtRoomFeeTransfer = daysAdmittedTransfer * modelItem.getRate().doubleValue();
                    	billingReportList.add(new BillingReport("Room Transfer",modelItem.getRoomNoTransfer(),String.valueOf(daysAdmittedTransfer),PIBSUtils.convertDoubleToStrNoPhp(modelItem.getRate().doubleValue()),String.valueOf(totalAmtRoomFeeTransfer)));//Room
            	        totalAmtRoomFee = totalAmtRoomFeeOriginal + totalAmtRoomFeeTransfer;
            	        daysAdmittedTotal = daysAdmitted + daysAdmittedTransfer;
            		} else {
            			//compute the transfer only
               	        //Second data (transferred room)
            			Timestamp dateFromTs = new Timestamp(modelItem.getDateTransferred().getTime());
            			java.util.Date dateFrom = DateUtils.getUtilDateFromSQLTimestamp(dateFromTs); 
            	        //check if last record
            	        Timestamp dateToTsTransfer = null;
            	        java.util.Date dateToTransfer = null;
            	        if (x+1 < rsList.size()) {
            	        	MonitorRoomTransfer modelItemNext = (MonitorRoomTransfer) rsList.get(x+1);
            	        	dateToTsTransfer = new Timestamp(modelItemNext.getDateTransferred().getTime());
            	        	dateToTransfer = DateUtils.getUtilDateFromSQLTimestamp(dateToTsTransfer);
            	        } else {
                        	//get current date
            	        	dateToTsTransfer = new Timestamp(System.currentTimeMillis());
                	        dateToTransfer = DateUtils.getUtilDateFromSQLTimestamp(dateToTsTransfer);
            	        }
            	        int daysAdmittedTransfer = PIBSUtils.daysBetweenUsingJoda(dateFrom,dateToTransfer);
            	        //get the room rate and compute room fee
            	        double totalAmtRoomFeeTransfer = daysAdmittedTransfer * modelItem.getRate().doubleValue();
                    	billingReportList.add(new BillingReport("Room Transfer",modelItem.getRoomNoTransfer(),String.valueOf(daysAdmittedTransfer),PIBSUtils.convertDoubleToStrNoPhp(modelItem.getRate().doubleValue()),String.valueOf(totalAmtRoomFeeTransfer)));//Room
            	        totalAmtRoomFee += totalAmtRoomFeeTransfer;
            	        daysAdmittedTotal += daysAdmittedTransfer;
            		}
            	}
            	setTotalAmtRoom(PIBSUtils.convertDoubleToStr(totalAmtRoomFee));
    	        //set the details
    	        getTotalList().add(totalAmtRoomFee);
    	        setDaysAdmitted(String.valueOf(daysAdmittedTotal));
    	        setRoomRate(PIBSUtils.convertDoubleToStr(model.getRoomFee().doubleValue()));
            } else {
            	//For No Room Transfer data
    	        //get the admission date
    	        Timestamp dateFromTs = new Timestamp(model.getDateOfCase().getTime());
    	        java.util.Date dateFrom = DateUtils.getUtilDateFromSQLTimestamp(dateFromTs);
    	        //get current date
    	        Timestamp dateToTs = new Timestamp(System.currentTimeMillis());
    	        java.util.Date dateTo = DateUtils.getUtilDateFromSQLTimestamp(dateToTs);
    	        int daysAdmitted = PIBSUtils.daysBetweenUsingJoda(dateFrom,dateTo);
    	        //get the room rate and compute room fee
    	        double totalAmtRoomFee = daysAdmitted * model.getRoomFee().doubleValue();
    	        setTotalAmtRoom(PIBSUtils.convertDoubleToStr(totalAmtRoomFee));
    	        //set the details
    	        getTotalList().add(totalAmtRoomFee);
    	        setDaysAdmitted(String.valueOf(daysAdmitted));
    	        setRoomRate(PIBSUtils.convertDoubleToStr(model.getRoomFee().doubleValue()));
    	       	billingReportList.add(new BillingReport("","","Days","Rate",""));//Add Header
            	billingReportList.add(new BillingReport("Room",model.getRoomNo(),getDaysAdmitted(),PIBSUtils.convertDoubleToStrNoPhp(model.getRoomFee().doubleValue()),String.valueOf(totalAmtRoomFee)));//Room
            }
        	
       }
		
	}

	
	//doctor's fee
	public void computeDoctorFee() throws Exception {	
		//fetch the patient admission details
		Admission model = new Admission();
		model.setId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.ADMISSION);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA_BY_PATIENT_CASE_SYS_ID);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        model = (Admission) resultMap.get(MapConstant.CLASS_DATA);	
	        //get the doctor rate and compute doctor fee
	        double totalAmtDoctorFee = Integer.parseInt(getDaysAdmitted()) * model.getDoctorFee().doubleValue();
	        setTotalAmtDoctor(PIBSUtils.convertDoubleToStr(totalAmtDoctorFee));
	        //set the details
	        getTotalList().add(totalAmtDoctorFee);
	        setDoctorFee(PIBSUtils.convertDoubleToStr(model.getDoctorFee().doubleValue()));
        	billingReportList.add(new BillingReport("Doctor",model.getDoctor(),getDaysAdmitted(),PIBSUtils.convertDoubleToStrNoPhp(model.getDoctorFee().doubleValue()),String.valueOf(totalAmtDoctorFee)));//Doctor       	
         }
		
	}

	public void getOtherDoctorDetails() throws Exception {	
		
		MonitorDoctor model = new MonitorDoctor();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_DOCTOR);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorDoctor> rsList = (List<MonitorDoctor>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setOtherDoctorList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorDoctor item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        		//for report
	        		billingReportList.add(new BillingReport("Other Doctor", item.getName(), 
	        				String.valueOf(item.getDays()), String.valueOf(item.getFee()), String.valueOf(item.getAmount())));
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtOtherDoctor(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}

	public void getOtherRoomDetails() throws Exception {	
		
		MonitorRoom model = new MonitorRoom();
		model.setPatientCaseSystemId(getPatientCaseSystemId());
		
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.MONITOR_ROOM);
        dataMap.put(MapConstant.CLASS_DATA, model);
        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
        
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
		
        if (resultMap!=null && !resultMap.isEmpty()) {
	        @SuppressWarnings("unchecked")
			List<MonitorRoom> rsList = (List<MonitorRoom>) resultMap.get(MapConstant.CLASS_LIST);
	        if (rsList!=null && !rsList.isEmpty()) {
	        	setOtherRoomList(rsList);
	        	//get the total amount
	        	double totalAmt = 0;
	        	for (MonitorRoom item: rsList) {
	        		totalAmt += item.getAmount().doubleValue();
	        		//for report
	        		billingReportList.add(new BillingReport("Other Room", item.getRoomNo(), 
	        				String.valueOf(item.getDays()), String.valueOf(item.getFee()), String.valueOf(item.getAmount())));
	        	}
	        	getTotalList().add(totalAmt);
	        	setTotalAmtOtherRoom(PIBSUtils.convertDoubleToStr(totalAmt));
	        }
        }
	}
	
	public void computeTotalAmtFee() {
  		//compute the total amount fee
		double totalAmt = 0;
		for (Double item: getTotalList()) {
			totalAmt += item;
		}
		setTotalAmtFee(PIBSUtils.convertDoubleToStr(totalAmt));
    	billingReportList.add(new BillingReport("","","","",""));//Add Space
    	billingReportList.add(new BillingReport("Total Fee","","","",getTotalAmtFee()));//Total amount fee

	}
	
	
	//Total Amt Due
	public void computeTotalAmtDue() throws Exception {	

		//compute the total deductions
		double totalAmtDeduct = 0;
		for (Double item: getDeductList()) {
			totalAmtDeduct += item;
		}//need to study this if need to create a new variable like totalAmtFee
		
		//compute the tax here
		//and subtract to the amount due --- pending
		
		if (totalAmtDeduct>0) {
           	billingReportList.add(new BillingReport("","","","",""));//Add Space
        	billingReportList.add(new BillingReport("Total Discount","","","",PIBSUtils.convertDoubleToStrNegative(totalAmtDeduct)));//Total discount
		}
		
		setTotalAmtDue(PIBSUtils.convertDoubleToStr(PIBSUtils.convertStrToDouble(getTotalAmtFee())-totalAmtDeduct));
		
		//for billing report
      	billingReportList.add(new BillingReport("","","","",""));//Add Space
    	billingReportList.add(new BillingReport("Total Due","","","",getTotalAmtDue()));//Total amount due
		
	}

	public void populateModelBilling (BillingDetailsFormBean formbean) throws Exception {
		Billing model = new Billing();
		model.setPatientCaseSystemid(formbean.getPatientCaseSystemId());
		if (formbean.getTotalAmtLabExam()!=null) {
			model.setTotalLaboratoryExamFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtLabExam())));		
		}
		if (formbean.getTotalAmtMedSupply()!=null) {
			model.setTotalMedsupplyFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtMedSupply())));
		}
		if (formbean.getTotalAmtRadiology()!=null) {
			model.setTotalRadiologyFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtRadiology())));
		}
		if (formbean.getTotalAmtSurgery()!=null) {
			model.setTotalSurgeryFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtSurgery())));
		}
		if (formbean.getTotalAmtAddServices()!=null) {
			model.setTotalAdditionalServicesFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtAddServices())));
		}
		if (formbean.getTotalAmtEquip()!=null) {
			model.setTotalEquipmentFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtEquip())));
		}
		if (formbean.getTotalAmtRoom()!=null) {
			model.setTotalRoomFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtRoom())));		
		}
		if (formbean.getTotalAmtDoctor()!=null) {
			model.setTotalDoctorFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtDoctor())));
		}
		if (formbean.getTotalAmtFee()!=null) {
			model.setTotalFee(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtFee())));
		}
		if (formbean.getTotalAmtDiscount()!=null) {
			model.setTotalDiscountAmt(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtDiscount())));
		}
		//pending total tax amount
		if (formbean.getTotalAmtDiscount()!=null) {
			model.setTotalBill(BigDecimal.valueOf(PIBSUtils.convertStrToDouble(formbean.getTotalAmtDue())));
		}
		setModelBilling(model);
	}
	
	public void updateFormBeanForBillingId () throws Exception {
		HashMap<String, Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.BILLING);
        dataMap.put(MapConstant.CLASS_DATA, getModelBilling());
        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA);
	
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
        
        if (resultMap!=null && !resultMap.isEmpty()) {
        	Billing modelUpdated = (Billing) resultMap.get(MapConstant.CLASS_DATA);
        	if (modelUpdated.getId()>0) {
	        	populateFormBeanBilling(modelUpdated);
        	}
        }
	}
	
	public void populateFormBeanBilling (Billing model) throws Exception {
		setBillingId(model.getId()); //id in patient bill table
		setPatientCaseSystemId(model.getPatientCaseSystemid());
		setCaseNo(model.getCaseNo());
		if (model.getTotalLaboratoryExamFee()!=null) {
			setTotalAmtLabExam(PIBSUtils.convertDoubleToStr(model.getTotalLaboratoryExamFee().doubleValue()));
		}
		if (model.getTotalMedsupplyFee()!=null) {
			setTotalAmtMedSupply(PIBSUtils.convertDoubleToStr(model.getTotalMedsupplyFee().doubleValue()));
		}
		if (model.getTotalRadiologyFee()!=null) {
			setTotalAmtRadiology(PIBSUtils.convertDoubleToStr(model.getTotalRadiologyFee().doubleValue()));
		}
		if (model.getTotalSurgeryFee()!=null) {
			setTotalAmtSurgery(PIBSUtils.convertDoubleToStr(model.getTotalSurgeryFee().doubleValue()));
		}
		if (model.getTotalAdditionalServicesFee()!=null) {
			setTotalAmtAddServices(PIBSUtils.convertDoubleToStr(model.getTotalAdditionalServicesFee().doubleValue()));
		}
		if (model.getTotalRoomFee()!=null) {
			setTotalAmtRoom(PIBSUtils.convertDoubleToStr(model.getTotalRoomFee().doubleValue()));
		}
		if (model.getTotalDoctorFee()!=null) {
			setTotalAmtDoctor(PIBSUtils.convertDoubleToStr(model.getTotalDoctorFee().doubleValue()));
		}
		if (model.getTotalFee()!=null) {
			setTotalAmtFee(PIBSUtils.convertDoubleToStr(model.getTotalFee().doubleValue()));
		}
		if (model.getTotalDiscountAmt()!=null) {
			setTotalAmtDiscount(PIBSUtils.convertDoubleToStr(model.getTotalDiscountAmt().doubleValue()));
		}
		//pending total tax amount
		if (model.getTotalBill()!=null) {
			setTotalAmtDue(PIBSUtils.convertDoubleToStr(model.getTotalBill().doubleValue()));
		}
		
	}
	
	/**
	 * 
	 * @param request
	 * @throws Exception
	 */
	public void generateReport(HttpServletRequest request) throws Exception {
	    
		//String localPath = request.getSession().getServletContext().getRealPath("/") + "/reports";//for linux - /reports
		String localPath = request.getSession().getServletContext().getRealPath("/") + File.separator + "reports";//for local testing - reports (without '/')
        // path when debugging
		//C:\eclipse\workspace_pibsweb\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\pibswebreports

		
		//Get the Report header Details
		Admission modelAdmission = new Admission();
		modelAdmission.setId(getPatientCaseSystemId());
		HashMap<String,Object> dataMap = new HashMap<String, Object>();
        dataMap.put(MapConstant.MODULE, ModuleConstant.ADMISSION);
        dataMap.put(MapConstant.CLASS_DATA, modelAdmission);
        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA_BY_PATIENT_CASE_SYS_ID_FOR_BILLING_REPORT);
	
        ServiceManager service = new ServiceManagerImpl();
        Map<String, Object> resultMap = service.executeRequest(dataMap);
    
        modelAdmission = (Admission) resultMap.get(MapConstant.CLASS_DATA);
        
	    Map<String, Object> parameters = new HashMap<>();
		
	    parameters.put("HospitalName", MapConstant.HOSPITAL_NAME);
		parameters.put("HospitalAddress", MapConstant.HOSPITAL_ADDRESS);
		parameters.put("CaseNo", modelAdmission.getCaseNo());
		parameters.put("Patient", modelAdmission.getPatientFullName());
		parameters.put("Doctor", modelAdmission.getDoctor());
		parameters.put("DateAdmitted", DateUtils.getStrDateTimeFromSQLTimestamp(modelAdmission.getDateOfCase()));
		parameters.put("PatientNo", modelAdmission.getPatientId());
		parameters.put("RoomNo", modelAdmission.getRoomNoTransfer()!=null ?  modelAdmission.getRoomNoTransfer() : modelAdmission.getRoomNo());
		parameters.put("PreparedBy", ((User)request.getSession().getAttribute(MiscConstant.USER_SESSION)).getName());
		parameters.put("DatePrepared", DateUtils.getCurrentDate());
		  
		boolean isReportGenerated = ReportUtils.generateBillingReport(billingReportList, parameters, localPath, getCaseNo()) ;
		if (isReportGenerated) {
			PIBSUtils.writeLogInfo(logger, "Billing report successfully generated for " + modelAdmission.getCaseNo());
		} else {
			PIBSUtils.writeLogInfo(logger, "Billing report was NOT generated for " + modelAdmission.getCaseNo());
		}
	}
	
	
	public List<MonitorDoctor> getOtherDoctorList() {
		return otherDoctorList;
	}




	public void setOtherDoctorList(List<MonitorDoctor> otherDoctorList) {
		this.otherDoctorList = otherDoctorList;
	}




	public String getTotalAmtOtherDoctor() {
		return totalAmtOtherDoctor;
	}




	public void setTotalAmtOtherDoctor(String totalAmtOtherDoctor) {
		this.totalAmtOtherDoctor = totalAmtOtherDoctor;
	}




	public List<MonitorRoom> getOtherRoomList() {
		return otherRoomList;
	}




	public void setOtherRoomList(List<MonitorRoom> otherRoomList) {
		this.otherRoomList = otherRoomList;
	}




	public String getTotalAmtOtherRoom() {
		return totalAmtOtherRoom;
	}




	public void setTotalAmtOtherRoom(String totalAmtOtherRoom) {
		this.totalAmtOtherRoom = totalAmtOtherRoom;
	}




	//test code samples
	public static void main(String args[]) {

		java.util.Date dateFrom = new java.util.Date("2018/02/15");
		java.util.Date dateTo = new java.util.Date("2018/02/17");
		System.out.println(daysBetweenUsingJoda(dateFrom,dateTo));
		
		Timestamp ts = new Timestamp(System.currentTimeMillis());
		System.out.println(getUtilDateFromSQLTimestamp(ts));
		
		//get date MM/dd/yyyy in timestamp
		 SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");  
		 String strDate= formatter.format(getUtilDateFromSQLTimestamp(ts));  
		 System.out.println(strDate);
		 
		 //get time using joda-time 
		 org.joda.time.LocalTime today = new org.joda.time.LocalTime(System.currentTimeMillis());
		 DateTimeFormatter f = DateTimeFormat.forPattern("HHmmss");
		 System.out.println(today);
		 
			SimpleDateFormat g = new SimpleDateFormat("hh:mm:ss a");  
			String strTime = g.format(System.currentTimeMillis()); 
			 System.out.println(strTime);
	
			 //compare time
			 // Get calendar set to the current date and time
			 Calendar cal = Calendar.getInstance();
			 
			 // Set time of calendar to 18:00
			 cal.set(Calendar.HOUR_OF_DAY, 20);
			 cal.set(Calendar.MINUTE, 0);
			 cal.set(Calendar.SECOND, 0);
			 cal.set(Calendar.MILLISECOND, 0);
		  
			 // Check if current time is after 18:00 today
			 boolean afterSix = Calendar.getInstance().after(cal);
			  
			 if (afterSix) {
			     System.out.println("Go home, it's after 6 PM!");
			 }
			 else {
			     System.out.println("Hello!");
			 }
			 
			 //check locale
			 Locale locale = new Locale("en", "PH");
			 Locale.setDefault(locale);
			 NumberFormat nf = NumberFormat.getNumberInstance(Locale.getDefault());
			 Currency c = Currency.getInstance(Locale.getDefault());
			 System.out.println(c.getSymbol());
			 System.out.println(c.getSymbol() + " " +  nf.format(107.789));
	}
	
	
	
	public static Date getUtilDateFromSQLTimestamp(java.sql.Timestamp timestamp) {
	    Date date = new Date(timestamp.getTime());
	    return date;
	}
	
	/* 
	* Java Method to find number of days between two dates 
	* in Java using JodaTime library. To find difference 
	* we first need to convert java.util.Date to LocalDate 
	* in JodaTime. (yyyy/MM/dd)*/ 
	public static int daysBetweenUsingJoda(Date d1, Date d2){ 
		return Days.daysBetween( 
				new LocalDate(d1.getTime()), 
				new LocalDate(d2.getTime())).getDays();
	}
	
}
