package com.pibs.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import com.pibs.config.ServerContext;
import com.pibs.constant.MapConstant;
import com.pibs.constant.MiscConstant;
import com.pibs.dao.AdmissionDao;
import com.pibs.model.Admission;
import com.pibs.model.User;
import com.pibs.util.PIBSUtils;

public class AdmissionDaoImpl implements AdmissionDao {

	private final static Logger logger = Logger.getLogger(AdmissionDaoImpl.class);
	
	@Override
	public Map<String, Object> save(HashMap<String, Object> dataMap) throws Exception{
		
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SAVE);
		
		//DBCP JNDI
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		boolean status = false;
		
		Admission model = (Admission) dataMap.get(MapConstant.CLASS_DATA);
		User user = (User) dataMap.get(MapConstant.USER_SESSION_DATA);
		
		if (user!=null) {
			model.setCreatedBy((int) user.getId());	
		}
		model.setCreatedOn(new Timestamp(new java.util.Date().getTime()));
		model.setDateOfCase(new Timestamp(new java.util.Date().getTime()));
		
		StringBuffer qry =  new StringBuffer("insert into pibs.tran_patient_case (");
		  		qry.append("caseno ");
		  		qry.append(",chiefcomplaint ");
		  		qry.append(",patientsystemid ");
		  		qry.append(",professionalid ");
		  		qry.append(",roomid ");
		  		qry.append(",patienttypeid ");
		  		qry.append(",dateofcase ");
		  		qry.append(",patientcasestatusid ");
		  		qry.append(",createdby ");
		  		qry.append(",createdon ");
		  		qry.append(",version ");
		  		qry.append(",active ");
		  		qry.append(" ) ");
		  		qry.append(" values ");
		  		qry.append(" ( ");
		  		qry.append(" ? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,1 ");
		  		qry.append(" ,true ");
		  		qry.append(" ) ");
		  		
		StringBuffer qryLog =  new StringBuffer("insert into pibs.tran_patient_case (");
				qryLog.append("caseno ");
				qryLog.append(",chiefcomplaint ");
				qryLog.append(",patientsystemid ");
				qryLog.append(",professionalid ");
				qryLog.append(",roomid ");
				qryLog.append(",patienttypeid ");
				qryLog.append(",dateofcase ");
				qryLog.append(",patientcasestatusid ");
				qryLog.append(",createdby ");
				qryLog.append(",createdon ");
				qryLog.append(",version ");
				qryLog.append(",active ");
				qryLog.append(" ) ");
				qryLog.append(" values ");
				qryLog.append(" ( ");
				qryLog.append(model.getCaseNo());
				qryLog.append(" ,"+model.getChiefComplaint());
				qryLog.append(" ,"+model.getPatientSystemId());
				qryLog.append(" ,"+model.getProfessionalId());
				qryLog.append(" ,"+model.getRoomId());
				qryLog.append(" ,"+model.getPatientTypeId());
				qryLog.append(" ,"+model.getDateOfCase());
				qryLog.append(" ,"+model.getPatientCaseStatusId());
				qryLog.append(" ,"+model.getCreatedBy());
				qryLog.append(" ,"+model.getCreatedOn());
				qryLog.append(" ,1 ");
				qryLog.append(" ,true ");
				qryLog.append(" ) ");
					
		PIBSUtils.writeLogDebug(logger, "SQL: "+qryLog.toString());
  		  		
		  try {
			  conn = ServerContext.getJDBCHandle();
			  conn.setAutoCommit(false);
			  pstmt = conn.prepareStatement(qry.toString());
			     
			  pstmt.setString(1, model.getCaseNo());
			  pstmt.setString(2, model.getChiefComplaint());
			  pstmt.setInt(3, model.getPatientSystemId());
			  pstmt.setInt(4, model.getProfessionalId());
			  pstmt.setInt(5, model.getRoomId());
			  pstmt.setInt(6, model.getPatientTypeId());
			  pstmt.setTimestamp(7, model.getDateOfCase());
			  pstmt.setInt(8, model.getPatientCaseStatusId());
			  pstmt.setInt(9, model.getCreatedBy());
			  pstmt.setTimestamp(10, model.getCreatedOn());
			     
			  int statusInt = pstmt.executeUpdate();
			     
			  if (statusInt == 1) {
				  conn.commit();
				  System.out.println("Inserted into Admission table successfully..");
				  status = true;
			  }
		  } catch (Exception e) {
			  conn.rollback();
		 	  e.printStackTrace();
		  } finally {
			  PIBSUtils.closeObjects(rs);
			  PIBSUtils.closeObjects(pstmt);
			  PIBSUtils.closeObjects(conn);
		  }
		 		
		returnMap.put(MapConstant.TRANSACTION_STATUS, status);
		
		return returnMap;
	}
	
	public static int getAdmissionCount() throws Exception{
		 
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SEARCH);

			 Connection conn = null;
			 ResultSet rs = null;;
			 PreparedStatement pstmt = null;
			 
			 int totalNoOfRecords = 0;
					  
			 try {
			 	 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = new StringBuffer("select id from pibs.tran_patient_case order by id desc limit 1");
		 			 
				 PIBSUtils.writeLogDebug(logger, "SQL: "+sql.toString());
					
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 rs = pstmt.executeQuery();
				 
				 if (rs.next()) {
					 totalNoOfRecords = rs.getInt(1);
				 } else {
					 totalNoOfRecords = 0;
				 }
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }
			 
	    System.out.println("getAdmissionCount() - Exit");
		return totalNoOfRecords;
	}
	
	@Override
	public Map<String, Object> getDataById(HashMap<String, Object> criteriaMap) throws Exception{
		 
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SEARCH);
		 
		 	Map<String, Object> returnMap = null;

		    //get the model criteria
		    Admission model = (Admission) criteriaMap.get(MapConstant.CLASS_DATA);
			 
			 Connection conn = null;
			 ResultSet rs = null;;
			 PreparedStatement pstmt = null;
					  
			 try {
				 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = null;
					sql = new StringBuffer(" select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,b.listvalue as patientstatus, ");
					    sql.append(" d.listvalue as patienttype,c.caseno,c.chiefcomplaint,e.roomno,f.lastname||', '||f.firstname||' '||f.middlename as doctor,c.dateofcase ");
					 	sql.append(" from pibs.file_patient_info a, pibs.list_value b, pibs.tran_patient_case c, pibs.list_value d, pibs.file_room e, pibs.file_professional f ");  
					 	sql.append(" where a.patientstatusid = b.id ");
					 	sql.append(" and a.id=c.patientsystemid ");
					 	sql.append(" and c.patienttypeid=d.id ");
					 	sql.append(" and c.roomid = e.id ");
					 	sql.append(" and c.professionalid = f.id ");
					 	sql.append(" and c.id = ?");

				PIBSUtils.writeLogDebug(logger, "SQL: "+sql.toString());
					
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 pstmt.setInt(1, model.getId());
				 
				 rs = pstmt.executeQuery();
				 
				 while(rs.next()) {
		    		 model.setPatientId(rs.getString(2));
		    		 model.setLastName(rs.getString(3));
		    		 model.setFirstName(rs.getString(4));
		    		 model.setMiddleName(rs.getString(5));
		    		 model.setGender(rs.getString(6));
		    		 model.setPatientStatus(rs.getString(7));
		    		 model.setPatientType(rs.getString(8));
		    		 model.setCaseNo(rs.getString(9));
		    		 model.setChiefComplaint(rs.getString(10));
		    		 model.setRoomNo(rs.getString(11));
		    		 model.setDoctor(rs.getString(12));
		    		 model.setDateOfCase(rs.getTimestamp(13));
				 }				 
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }
		
		     if (model!=null) {
		    	 returnMap = new HashMap<String, Object>();
		    	 returnMap.put(MapConstant.CLASS_DATA, model);
		     } 
		     
	    System.out.println("getDataById() - Exit");
		return returnMap;

	}
	
	@Override
	public Map<String, Object> getDataByCaseNo(HashMap<String, Object> criteriaMap) throws Exception{
		 
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SEARCH);
		 
		 	Map<String, Object> returnMap = null;

		    //get the model criteria
		    Admission model = (Admission) criteriaMap.get(MapConstant.CLASS_DATA);
			 
			 Connection conn = null;
			 ResultSet rs = null;;
			 PreparedStatement pstmt = null;
					  
			 try {
				 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = null;
					sql = new StringBuffer(" select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,b.listvalue as patientstatus, ");
					    sql.append(" d.listvalue as patienttype,c.caseno,c.chiefcomplaint,e.roomno,f.lastname||', '||f.firstname||' '||f.middlename as doctor,c.dateofcase, c.id as patientcasesystemid ");
					 	sql.append(" from pibs.file_patient_info a, pibs.list_value b, pibs.tran_patient_case c, pibs.list_value d, pibs.file_room e, pibs.file_professional f ");  
					 	sql.append(" where a.patientstatusid = b.id ");
					 	sql.append(" and a.id=c.patientsystemid ");
					 	sql.append(" and c.patienttypeid=d.id ");
					 	sql.append(" and c.roomid = e.id ");
					 	sql.append(" and c.professionalid = f.id ");
					 	sql.append(" and c.caseNo = ?");

				PIBSUtils.writeLogDebug(logger, "SQL: "+sql.toString());
					
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 pstmt.setString(1, model.getCaseNo());
				 
				 rs = pstmt.executeQuery();
				 
				 while(rs.next()) {
		    		 model.setPatientId(rs.getString(2));
		    		 model.setLastName(rs.getString(3));
		    		 model.setFirstName(rs.getString(4));
		    		 model.setMiddleName(rs.getString(5));
		    		 model.setGender(rs.getString(6));
		    		 model.setPatientStatus(rs.getString(7));
		    		 model.setPatientType(rs.getString(8));
		    		 model.setCaseNo(rs.getString(9));
		    		 model.setChiefComplaint(rs.getString(10));
		    		 model.setRoomNo(rs.getString(11));
		    		 model.setDoctor(rs.getString(12));
		    		 model.setDateOfCase(rs.getTimestamp(13));
		    		 model.setId(rs.getInt(14));
				 }				 
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }
		
		     if (model!=null) {
		    	 returnMap = new HashMap<String, Object>();
		    	 returnMap.put(MapConstant.CLASS_DATA, model);
		     } 
		     
	    System.out.println("getDataByCaseNo() - Exit");
		return returnMap;
	}
	
}
