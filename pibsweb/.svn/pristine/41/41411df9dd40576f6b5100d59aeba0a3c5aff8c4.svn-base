package com.pibs.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;





import org.apache.log4j.Logger;
//import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.pibs.constant.ActionConstant;
import com.pibs.constant.MapConstant;
import com.pibs.constant.MiscConstant;
import com.pibs.constant.ModuleConstant;
import com.pibs.constant.ParamConstant;
import com.pibs.form.BillingFormBean;
import com.pibs.model.Billing;
import com.pibs.model.Patient;
import com.pibs.model.User;
import com.pibs.service.ServiceManager;
import com.pibs.service.ServiceManagerImpl;

public class BillingAction extends Action {
	
	private final static Logger logger = Logger.getLogger(BillingAction.class);
	
	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		
		BillingFormBean formBean = (BillingFormBean) form;
        String forwardAction = ActionConstant.NONE;
		String command = request.getParameter("command");
		
		if (command!=null) {
			
			int module = ModuleConstant.BILLING;
			
			if (command.equalsIgnoreCase(ParamConstant.AJAX_GO_TO_SEARCH)) {
				formBean.setTransactionStatus(false);
				formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
				forwardAction = ActionConstant.SHOW_AJAX_GO_TO_SEARCH;
			} else if (command.equalsIgnoreCase(ParamConstant.AJAX_SEARCH)) {
				//get all the records from DB
				
				 int page = 1;
			     if(request.getParameter("page") != null) {
			         page = Integer.parseInt(request.getParameter("page")); 
			     }
			     
			    int offset = (page-1) * MiscConstant.RECORDS_PER_PAGE; 
			    
				String category = null;
				 if(request.getParameter("category") != null) {
					 category=(String) request.getParameter("category");
					 formBean.setCategory(category);
					 if (category.equals("filter")) {
						 category = ActionConstant.SEARCH_PATIENT_ADMITTED;
					 } else {
						 category = ActionConstant.SEARCH_ALL_PATIENT_ADMITTED;
					 }
				} 
				  
				String criteria = null;
				if(formBean.getCriteria()!=null && formBean.getCriteria().trim().length() > 0) {
					criteria = formBean.getCriteria();
				}

				HashMap<String,Object> dataMap = new HashMap<String, Object>();
		        dataMap.put(MapConstant.MODULE, ModuleConstant.PATIENT);
			    dataMap.put(MapConstant.ACTION, category);
			    dataMap.put(MapConstant.SEARCH_CRITERIA, criteria);
			    dataMap.put(MapConstant.PAGINATION_LIMIT, MiscConstant.RECORDS_PER_PAGE);
			    dataMap.put(MapConstant.PAGINATION_OFFSET, offset);

		        ServiceManager service = new ServiceManagerImpl();
		        Map<String, Object> resultMap = service.executeRequest(dataMap);
		        
		        if (resultMap!=null && !resultMap.isEmpty()) {
			        
					@SuppressWarnings("unchecked")
					List<Patient> qryList =  (List<Patient>) resultMap.get(MapConstant.CLASS_LIST);		        		

		        	formBean.setModelList(qryList);
		        	
		        	int totalNoOfRecords = (int) resultMap.get(MapConstant.PAGINATION_TOTALRECORDS);
		            int noOfPages = (int) Math.ceil(totalNoOfRecords * 1.0 / MiscConstant.RECORDS_PER_PAGE);
					
		            formBean.setNoOfPages(noOfPages);
		            formBean.setCurrentPage(page);
		            
		        } else {
		        	formBean.setModelList(null);
		            formBean.setNoOfPages(0);
		            formBean.setCurrentPage(0);
		        }
		        
		        forwardAction = ActionConstant.SHOW_AJAX_TABLE;
		        
			}  else if (command.equalsIgnoreCase(ParamConstant.AJAX_GO_TO_BILLING)) {
				
				int patientCaseSystemId = Integer.parseInt(request.getParameter("patientCaseSystemId"));				
				
				formBean.setId(patientCaseSystemId);
				formBean.getPatientAdmissionDetails();//fetch the patient and admission details
				
				//get the summary info
				formBean.getLaboratoryExaminationDetails();
				formBean.getMedicalSupplyDetails();
				formBean.getRadiologyDetails();
				formBean.getSurgeryDetails();
				formBean.getAdditionalServicesDetails();
				formBean.getEquipmentDetails();
				formBean.getDiscountDetails();
				formBean.computeRoomAndDoctorFee();
				formBean.computeTotalAmtDue();
				
				formBean.populateModelBilling(formBean);
				
				//check first if record exists in Patient bill table
				HashMap<String,Object> dataMap = new HashMap<String, Object>();
		        dataMap.put(MapConstant.MODULE, module);
		        dataMap.put(MapConstant.CLASS_DATA, formBean.getModelBilling());
		        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA);
			
		        ServiceManager service = new ServiceManagerImpl();
		        Map<String, Object> resultMap = service.executeRequest(dataMap);
		        
		        if (resultMap!=null && !resultMap.isEmpty()) {
		        	Billing model = (Billing) resultMap.get(MapConstant.CLASS_DATA);
		        	User user = (User) request.getSession().getAttribute(MiscConstant.USER_SESSION);
			        dataMap = null;
			        service = null;
			        resultMap = null;
		        	if (model.getId()>0) {
			        	//update the record
			        	formBean.populateFormBeanBilling(model);	
			        	//code here for update
			        	
		        	} else {

			        	//save new record
						//save totals to patient bill table
						dataMap = new HashMap<String, Object>();
				        dataMap.put(MapConstant.MODULE, module);
				        dataMap.put(MapConstant.CLASS_DATA, formBean.getModelBilling());
				        dataMap.put(MapConstant.USER_SESSION_DATA, user);
				        dataMap.put(MapConstant.ACTION, ActionConstant.SAVE);
				        
				        service = new ServiceManagerImpl();
				        resultMap = service.executeRequest(dataMap);
				        
				        if (resultMap!=null && !resultMap.isEmpty()) {
				        	boolean transactionStatus = (boolean) resultMap.get(MapConstant.TRANSACTION_STATUS);
				        	if (transactionStatus) {
					        	formBean.setTransactionStatus(transactionStatus);
					        	//need to update the formbean for Billing Id
					        	
						        dataMap = null;
						        service = null;
						        resultMap = null;
						        
								dataMap = new HashMap<String, Object>();
						        dataMap.put(MapConstant.MODULE, module);
						        dataMap.put(MapConstant.CLASS_DATA, formBean.getModelBilling());
						        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA);
							
						        service = new ServiceManagerImpl();
						        resultMap = service.executeRequest(dataMap);
						        
						        if (resultMap!=null && !resultMap.isEmpty()) {
						        	Billing modelUpdated = (Billing) resultMap.get(MapConstant.CLASS_DATA);
						        	if (modelUpdated.getId()>0) {
							        	formBean.populateFormBeanBilling(modelUpdated);
						        	}
						        }
					        	
					        	logger.info("Patient Bill successfully saved/updated: " + formBean.getId());//Patient Case System Id
					        	
				        	}
				        }
			        
		        	}
		        } else {
		        	logger.info("Resultmap is empty...");
		        }
				
				formBean.setTransactionStatus(false);
				formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
				
				forwardAction = ActionConstant.SHOW_AJAX_GO_TO_BILLING;
			}		
		} else {
			//show main screen
			 forwardAction = ActionConstant.SHOW_AJAX_MAIN;
		}
		
		return mapping.findForward(forwardAction);
	}	
	


}
