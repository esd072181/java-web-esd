package com.pibs.form;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

import com.pibs.constant.ActionConstant;
import com.pibs.constant.MapConstant;
import com.pibs.constant.MiscConstant;
import com.pibs.constant.ModuleConstant;
import com.pibs.constant.ParamConstant;
import com.pibs.model.Building;
import com.pibs.model.Room;
import com.pibs.model.RoomCategory;
import com.pibs.service.ServiceManager;
import com.pibs.service.ServiceManagerImpl;


/**
 *  
 * @author dward
 * @version 1.0
 * @since 07Mar2015
 *
 */
public class RoomFormBean extends PIBSFormBean {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private int id;
	private String roomNo;
	private int roomCategoryId;
	private int buildingId;
	private int floorNo;
	private int noOfBeds;
	private int availableBeds;
	private String description;
	
	private String criteria;
	private String category;
	private int noOfPages;
	private int currentPage;
	private List<Room> modelList;
	
	private boolean transactionStatus;
	private String transactionMessage;
	
	private List<RoomCategory> roomCategoryList;
	private List<Building> buildingList;
	
	private List<HashMap<String, String>> noOfFloorList;
	
	
	public RoomFormBean() {}
	
	public List<RoomCategory> getRoomCategoryList() {
		return roomCategoryList;
	}

	public void setRoomCategoryList(List<RoomCategory> roomCategoryList) {
		this.roomCategoryList = roomCategoryList;
	}

	public List<Building> getBuildingList() {
		return buildingList;
	}

	public void setBuildingList(List<Building> buildingList) {
		this.buildingList = buildingList;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getRoomNo() {
		return roomNo;
	}

	public void setRoomNo(String roomNo) {
		this.roomNo = roomNo;
	}

	public int getRoomCategoryId() {
		return roomCategoryId;
	}

	public void setRoomCategoryId(int roomCategoryId) {
		this.roomCategoryId = roomCategoryId;
	}

	public int getBuildingId() {
		return buildingId;
	}

	public void setBuildingId(int buildingId) {
		this.buildingId = buildingId;
	}

	public int getFloorNo() {
		return floorNo;
	}

	public void setFloorNo(int floorNo) {
		this.floorNo = floorNo;
	}

	public int getNoOfBeds() {
		return noOfBeds;
	}

	public void setNoOfBeds(int noOfBeds) {
		this.noOfBeds = noOfBeds;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getCriteria() {
		return criteria;
	}

	public void setCriteria(String criteria) {
		this.criteria = criteria;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public int getNoOfPages() {
		return noOfPages;
	}

	public void setNoOfPages(int noOfPages) {
		this.noOfPages = noOfPages;
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}

	public List<Room> getModelList() {
		return modelList;
	}

	public void setModelList(List<Room> modelList) {
		this.modelList = modelList;
	}

	public boolean isTransactionStatus() {
		return transactionStatus;
	}

	public void setTransactionStatus(boolean transactionStatus) {
		this.transactionStatus = transactionStatus;
	}

	public String getTransactionMessage() {
		return transactionMessage;
	}

	public void setTransactionMessage(String transactionMessage) {
		this.transactionMessage = transactionMessage;
	}

	
	public List<HashMap<String, String>> getNoOfFloorList() {
		return noOfFloorList;
	}

	public void setNoOfFloorList(List<HashMap<String, String>> noOfFloorList) {
		this.noOfFloorList = noOfFloorList;
	}

	
	public int getAvailableBeds() {
		return availableBeds;
	}

	public void setAvailableBeds(int availableBeds) {
		this.availableBeds = availableBeds;
	}

	public void populateFormBean(Room model) {
		setId(model.getId());
		setRoomNo(model.getRoomNo());
		setRoomCategoryId(model.getRoomCategoryId());
		setBuildingId(model.getBuildingId());
		setFloorNo(model.getFloorNo());
		setNoOfBeds(model.getNoOfBeds());
		setAvailableBeds(model.getAvailableBeds());
		setDescription(model.getDescription());
	}
	
	
	public Room populateModel (RoomFormBean formBean) {
		Room model = new Room();
		model.setId(formBean.getId());
		model.setRoomNo(formBean.getRoomNo());
		model.setRoomCategoryId(formBean.getRoomCategoryId());
		model.setBuildingId(formBean.getBuildingId());
		model.setFloorNo(formBean.getFloorNo());
		model.setNoOfBeds(formBean.getNoOfBeds());
		model.setAvailableBeds(formBean.getAvailableBeds());
		model.setDescription(formBean.getDescription());
		return model;
	}
	
	@Override
	public ActionErrors validate(ActionMapping mapping,
			HttpServletRequest request) {
		// TODO Auto-generated method stub
		ActionErrors errors = new ActionErrors();
		
		String command = (String) request.getParameter("command"); 
		
		if (command!=null && (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE) || command.equalsIgnoreCase(ParamConstant.AJAX_UPDATE))) {
			boolean flag = false;
			
			if (this.getRoomNo()==null || this.getRoomNo().trim().length() < 1) {
				errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage("mf.roomno.req"));
				flag = true;
			}
			if (this.getRoomCategoryId()==0) {
				errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage("mf.roomcategory.req"));
				flag = true;
			}
			if (this.getBuildingId()==0) {
				errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage("mf.roombuilding.req"));
				flag = true;
			}
			if (this.getNoOfBeds()==0) {
				errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage("mf.roomnoofbeds.req"));
				flag = true;
			}
			
			if (flag) {
				try {
					//get list from session
					populateDropdownListFromSession(request);		
							
				} catch(Exception e) {}				
			}
		} 

		return errors;
	}
	
	/**
	 * 
	 * @param request
	 * @throws Exception
	 */
	public void populateDropdownList(HttpServletRequest request) throws Exception{
			//get the room category list
			HashMap<String,Object> dataMap = new HashMap<String, Object>();
			dataMap.put(MapConstant.MODULE, ModuleConstant.ROOM_CATEGORY);
			dataMap.put(MapConstant.ACTION, ActionConstant.GET_ACTIVE_DATA);

	        ServiceManager service = new ServiceManagerImpl();
	        Map<String, Object> resultMap = service.executeRequest(dataMap);
	        
	        if (resultMap!=null && !resultMap.isEmpty()) {
				@SuppressWarnings("unchecked")
				List<RoomCategory> qryList =  (List<RoomCategory>) resultMap.get(MapConstant.CLASS_LIST);		        		
	        	setRoomCategoryList(qryList);
	        	if (request.getSession().getAttribute(MiscConstant.MF_ROOM_CATEGORY_LIST)!=null) {
	        		request.getSession().removeAttribute(MiscConstant.MF_ROOM_CATEGORY_LIST);
	        	}
	        	//save to session
	        	request.getSession().setAttribute(MiscConstant.MF_ROOM_CATEGORY_LIST, qryList);
	        }
	        
	        dataMap = null;
	        resultMap = null;
	        		
	        //get the building list
	        dataMap = new HashMap<String, Object>();
	        dataMap.put(MapConstant.MODULE, ModuleConstant.BUILDING);
	        dataMap.put(MapConstant.ACTION, ActionConstant.GET_ACTIVE_DATA);

	        resultMap = service.executeRequest(dataMap);
	        
	        if (resultMap!=null && !resultMap.isEmpty()) {
				@SuppressWarnings("unchecked")
				List<Building> qryList =  (List<Building>) resultMap.get(MapConstant.CLASS_LIST);		        		
	        	setBuildingList(qryList);
	        	if (request.getSession().getAttribute(MiscConstant.MF_BUILDING_LIST)!=null) {
	        		request.getSession().removeAttribute(MiscConstant.MF_BUILDING_LIST);
	        	}
	        	//save to session
	        	request.getSession().setAttribute(MiscConstant.MF_BUILDING_LIST, qryList);
	        }
	        
			List<HashMap<String, String>> noOfFloorList =  new ArrayList<HashMap<String, String>>();
			HashMap<String, String> noOfFloorMap = new HashMap<String, String>();
			noOfFloorMap.put("id", "0");
			noOfFloorMap.put("value", "--Select--");
			noOfFloorList.add(noOfFloorMap);
			setNoOfFloorList(noOfFloorList); 
	    	if (request.getSession().getAttribute(MiscConstant.NO_FLOOR_LIST)!=null) {
	    		request.getSession().removeAttribute(MiscConstant.NO_FLOOR_LIST);
	    	}
	    	//save to session
	    	request.getSession().setAttribute(MiscConstant.NO_FLOOR_LIST, noOfFloorList);
		}
		
	/**
	 * 
	 * @param request
	 * @throws Exception
	 */
	public void populateFloorNoByBuildingId(HttpServletRequest request) throws Exception {
			
			String id = request.getParameter("buildingId");
			
			@SuppressWarnings("unchecked")
			List<Building>	bldgList = (ArrayList<Building>) request.getSession().getAttribute(MiscConstant.MF_BUILDING_LIST);
		
			Building model = bldgList.get(Integer.parseInt(id));
			
			int noOfFloor = model.getNoOfFloor();
			
			List<HashMap<String, String>> list =  new ArrayList<HashMap<String, String>>();
			HashMap<String, String> noOfFloorMap = null;
			
			for (int i=1;i<=noOfFloor;i++) {
				noOfFloorMap = new HashMap<String, String>();
				noOfFloorMap.put("id", String.valueOf(i));
				noOfFloorMap.put("value", String.valueOf(i));
				list.add(noOfFloorMap);
			}
			
			setNoOfFloorList(list);
	    	if (request.getSession().getAttribute(MiscConstant.NO_FLOOR_LIST)!=null) {
	    		request.getSession().removeAttribute(MiscConstant.NO_FLOOR_LIST);
	    	}
	    	//save to session
	    	request.getSession().setAttribute(MiscConstant.NO_FLOOR_LIST, list);
	}
	
	@SuppressWarnings("unchecked")
	public void populateDropdownListFromSession(HttpServletRequest request) throws Exception{
		List<RoomCategory> qryList = (List<RoomCategory>) request.getSession().getAttribute(MiscConstant.MF_ROOM_CATEGORY_LIST);
		if (qryList!=null) {
			setRoomCategoryList(qryList);
			setBuildingList((List<Building>) request.getSession().getAttribute(MiscConstant.MF_BUILDING_LIST));
			setNoOfFloorList((List<HashMap<String,String>>) request.getSession().getAttribute(MiscConstant.NO_FLOOR_LIST)); 
		} else {
			populateDropdownList(request);
		}	
	}

}
