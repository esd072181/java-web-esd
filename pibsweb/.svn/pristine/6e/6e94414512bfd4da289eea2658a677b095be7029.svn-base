package com.pibs.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.pibs.constant.ActionConstant;
import com.pibs.constant.MapConstant;
import com.pibs.constant.MiscConstant;
import com.pibs.constant.ModuleConstant;
import com.pibs.constant.ParamConstant;
import com.pibs.form.AdmissionFormBean;
import com.pibs.model.Admission;
import com.pibs.model.Patient;
import com.pibs.model.User;
import com.pibs.service.ServiceManager;
import com.pibs.service.ServiceManagerImpl;
import com.pibs.util.PIBSUtils;

public class AdmissionAction extends Action {
	
	private final static Logger logger = Logger.getLogger(AdmissionAction.class);
	
	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		
		AdmissionFormBean formBean = (AdmissionFormBean) form;
        String forwardAction = ActionConstant.NONE;
		String command = request.getParameter("command");
		
		if (command!=null) {
			
			int module = ModuleConstant.ADMISSION;
			
			if (command.equalsIgnoreCase(ParamConstant.AJAX_GO_TO_SEARCH)) {
				formBean.setTransactionStatus(false);
				formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
				forwardAction = ActionConstant.SHOW_AJAX_GO_TO_SEARCH;
			} else if (command.equalsIgnoreCase(ParamConstant.AJAX_SEARCH)) {
				//get all the records from DB
				
				 int page = 1;
			     if(request.getParameter("page") != null) {
			         page = Integer.parseInt(request.getParameter("page")); 
			     }
			     
			    int offset = (page-1) * MiscConstant.RECORDS_PER_PAGE; 
			    
				String category = null;
				 if(request.getParameter("category") != null) {
					 category=(String) request.getParameter("category");
					 formBean.setCategory(category);
					 if (category.equals("filter")) {
						 category = ActionConstant.SEARCH_PATIENT_FOR_ADMISSION;
					 } else {
						 category = ActionConstant.SEARCHALL;
					 }
				} 
				  
				String criteria = null;
				if(formBean.getCriteria()!=null && formBean.getCriteria().trim().length() > 0) {
					criteria = formBean.getCriteria();
				}
			     

				HashMap<String,Object> dataMap = new HashMap<String, Object>();
		        dataMap.put(MapConstant.MODULE, ModuleConstant.PATIENT);
			    dataMap.put(MapConstant.ACTION, category);
			    dataMap.put(MapConstant.SEARCH_CRITERIA, criteria);
			    dataMap.put(MapConstant.PAGINATION_LIMIT, MiscConstant.RECORDS_PER_PAGE);
			    dataMap.put(MapConstant.PAGINATION_OFFSET, offset);

		        ServiceManager service = new ServiceManagerImpl();
		        Map<String, Object> resultMap = service.executeRequest(dataMap);
		        
		        if (resultMap!=null && !resultMap.isEmpty()) {
			        
					@SuppressWarnings("unchecked")
					List<Patient> qryList =  (List<Patient>) resultMap.get(MapConstant.CLASS_LIST);		        		

		        	formBean.setModelList(qryList);
		        	
		        	int totalNoOfRecords = (int) resultMap.get(MapConstant.PAGINATION_TOTALRECORDS);
		            int noOfPages = (int) Math.ceil(totalNoOfRecords * 1.0 / MiscConstant.RECORDS_PER_PAGE);
					
		            formBean.setNoOfPages(noOfPages);
		            formBean.setCurrentPage(page);
		            
		        } else {
		        	formBean.setModelList(null);
		            formBean.setNoOfPages(0);
		            formBean.setCurrentPage(0);
		        }
		        
		        forwardAction = ActionConstant.SHOW_AJAX_TABLE;
		        
			}  else if (command.equalsIgnoreCase(ParamConstant.AJAX_GO_TO_ADMISSION)) {
				
				formBean.getPatientDetails(request);//fetch the patient details
		        formBean.populateDropdownList(request, formBean);

				formBean.setTransactionStatus(false);
				formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
				
				forwardAction = ActionConstant.SHOW_AJAX_GO_TO_ADMISSION;
			
			}  else if (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE)) {
				//populateModel
				Admission model = (Admission) formBean.populateModel(formBean);
				
				User user = (User) request.getSession().getAttribute(MiscConstant.USER_SESSION);
				
				HashMap<String,Object> dataMap = new HashMap<String, Object>();
		        dataMap.put(MapConstant.MODULE, module);
		        dataMap.put(MapConstant.CLASS_DATA, model);
		        dataMap.put(MapConstant.USER_SESSION_DATA, user);
		        
		        model.setCaseNo(formBean.generateAdmissionId());//generate AdmissionId
		        formBean.setCaseNo(model.getCaseNo());//show it to the form
		        
			    dataMap.put(MapConstant.ACTION, ActionConstant.SAVE);
		        
		        ServiceManager service = new ServiceManagerImpl();
		        Map<String, Object> resultMap = service.executeRequest(dataMap);
		        
		        if (resultMap!=null && !resultMap.isEmpty()) {
		        	//check resultmap action status
		        	boolean transactionStatus = (boolean) resultMap.get(MapConstant.TRANSACTION_STATUS);

		        	formBean.setTransactionStatus(transactionStatus);
		        	formBean.populateDropdownListFromSession(request, formBean, false);  
		        			
		        	if (transactionStatus) {
		        		//update the Patient status to admitted = 502
		        		formBean.getPatientDetails(request);
		        		Patient patientModel = formBean.getPatient();
		        		patientModel.setPatientStatusId(502);
		        		
						HashMap<String,Object> patientDataMap = new HashMap<String, Object>();
						patientDataMap.put(MapConstant.MODULE, ModuleConstant.PATIENT);
						patientDataMap.put(MapConstant.CLASS_DATA, patientModel);
						patientDataMap.put(MapConstant.USER_SESSION_DATA, user);
						patientDataMap.put(MapConstant.ACTION, ActionConstant.UPDATE);
						
						service = new ServiceManagerImpl();
					    resultMap = service.executeRequest(patientDataMap);
					    
					    if (resultMap!=null && !resultMap.isEmpty()) {
					    	boolean transactionStatusforPatientUpdate = (boolean) resultMap.get(MapConstant.TRANSACTION_STATUS);
					    	if (transactionStatusforPatientUpdate) {
					    		logger.info("Patient System Id successfully Admitted: " + patientModel.getId());
					    	} else {
					    		logger.info("Error in updating patient status of Patient System Id: " + formBean.getPatient().getPatientId());
					    	}
					    }
					        
					    //get the Patient Case System Id
						HashMap<String,Object> admissionDataMap = new HashMap<String, Object>();
						admissionDataMap.put(MapConstant.MODULE, module);
						admissionDataMap.put(MapConstant.CLASS_DATA, model);
						admissionDataMap.put(MapConstant.USER_SESSION_DATA, user);
						admissionDataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
						
						service = new ServiceManagerImpl();
					    resultMap = service.executeRequest(admissionDataMap);
					    
					    if (resultMap!=null && !resultMap.isEmpty()) {
					    	Admission resultModel = (Admission) resultMap.get(MapConstant.CLASS_DATA);
					    	formBean.populateFormBean(resultModel);
					    }
					    
		        		//show success page
		        		//add confirmation message
		        				        		
		        		formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_SAVED);
		        		PIBSUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_SAVED+" - "+module);
		        		//logger.info(MiscConstant.TRANS_MESSSAGE_SAVED);
		        		forwardAction = ActionConstant.AJAX_SUCCESS;
		        	} else {
		        		formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_ERROR);
		        		//logger.info(MiscConstant.TRANS_MESSSAGE_ERROR);
		        		PIBSUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_ERROR+" - "+module);
		        		forwardAction = ActionConstant.AJAX_FAILED;
		        	}
		        }
			} 
		} else {
			//show main screen
			 forwardAction = ActionConstant.SHOW_AJAX_MAIN;
		}
		
		return mapping.findForward(forwardAction);
	}	
	


}
