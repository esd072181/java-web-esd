package com.pibs.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.pibs.constant.ActionConstant;
import com.pibs.constant.MapConstant;
import com.pibs.constant.MiscConstant;
import com.pibs.constant.ModuleConstant;
import com.pibs.constant.ParamConstant;
import com.pibs.form.MonitorDoctorFormBean;
import com.pibs.model.MonitorDoctor;
import com.pibs.model.Professional;
import com.pibs.model.User;
import com.pibs.service.ServiceManager;
import com.pibs.service.ServiceManagerImpl;
import com.pibs.util.PIBSUtils;

public class MonitorDoctorAction extends Action {
	
	private final static Logger logger = Logger.getLogger(MonitorDoctorAction.class);
	
	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		
		MonitorDoctorFormBean formBean = (MonitorDoctorFormBean) form;
        String forwardAction = ActionConstant.NONE;
		String command = request.getParameter("command");

		//session expired checking
		if (request.getSession().getAttribute(MiscConstant.USER_SESSION) == null) {
			forwardAction = ActionConstant.SHOW_AJAX_EXPIRED;
		} else {
			if (command!=null) {
				
				int module = ModuleConstant.MONITOR_DOCTOR;
				
				if (command.equalsIgnoreCase(ParamConstant.AJAX_GO_TO_MONITOR_PATIENT_CHILD)) {		
					//fetch the data
					
					int patientSystemCaseId = Integer.parseInt(request.getParameter("patientCaseSystemId"));
					
					MonitorDoctor model = new MonitorDoctor();
					model.setPatientCaseSystemId(patientSystemCaseId);
					
					HashMap<String,Object> dataMap = new HashMap<String, Object>();
			        dataMap.put(MapConstant.MODULE, module);
			        dataMap.put(MapConstant.CLASS_DATA, model);
			        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
			        
			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
					
			        if (resultMap!=null && !resultMap.isEmpty()) {		        		
				        @SuppressWarnings("unchecked")
						List<MonitorDoctor> rsList =  (ArrayList<MonitorDoctor>) resultMap.get(MapConstant.CLASS_LIST);		        		
			        	formBean.populateEntityList(rsList);
			        }

					formBean.setTransactionStatus(false);
					formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
					forwardAction = ActionConstant.SHOW_AJAX_GO_TO_MONITOR_PATIENT_CHILD;
					
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_GO_TO_MONITOR_PATIENT_CHILD_SEARCH)) {
					
					formBean.setPatientCaseSystemId(Integer.parseInt(request.getParameter("patientCaseSystemId")));
					formBean.setTransactionStatus(false);
					formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
					forwardAction = ActionConstant.SHOW_AJAX_GO_TO_MONITOR_PATIENT_CHILD_SEARCH;
					
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_SEARCH)) {
					//get all the records from DB
					
					 int page = 1;
				     if(request.getParameter("page") != null) {
				         page = Integer.parseInt(request.getParameter("page")); 
				     }
				     
				    int offset = (page-1) * MiscConstant.RECORDS_PER_PAGE; 
				    
					String category = null;
					 if(request.getParameter("category") != null) {
						 category=(String) request.getParameter("category");
						 formBean.setCategory(category);
						 if (category.equals("filter")) {
							 category = ActionConstant.SEARCHBY;
						 } else {
							 category = ActionConstant.SEARCHALL;
						 }
					} 
					  
					String criteria = null;
					if(formBean.getCriteria()!=null && formBean.getCriteria().trim().length() > 0) {
						criteria = formBean.getCriteria();
					}
				     

					HashMap<String,Object> dataMap = new HashMap<String, Object>();
			        dataMap.put(MapConstant.MODULE, ModuleConstant.PROFESSIONAL);
				    dataMap.put(MapConstant.ACTION, category);
				    dataMap.put(MapConstant.SEARCH_CRITERIA, criteria);
				    dataMap.put(MapConstant.PAGINATION_LIMIT, MiscConstant.RECORDS_PER_PAGE);
				    dataMap.put(MapConstant.PAGINATION_OFFSET, offset);

			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
			        
			        if (resultMap!=null && !resultMap.isEmpty()) {
				        
						@SuppressWarnings("unchecked")
						List<Professional> qryList =  (List<Professional>) resultMap.get(MapConstant.CLASS_LIST);		        		

			        	formBean.setModelList(qryList);
			        	
			        	int totalNoOfRecords = (int) resultMap.get(MapConstant.PAGINATION_TOTALRECORDS);
			            int noOfPages = (int) Math.ceil(totalNoOfRecords * 1.0 / MiscConstant.RECORDS_PER_PAGE);
						
			            formBean.setNoOfPages(noOfPages);
			            formBean.setCurrentPage(page);
			            
			        } else {
			        	formBean.setModelList(null);
			            formBean.setNoOfPages(0);
			            formBean.setCurrentPage(0);
			        }
			        
			        forwardAction = ActionConstant.SHOW_AJAX_TABLE;
			    
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_ADD)) {

					formBean.getDoctorDetails(request);//fetch the Doctor details

					formBean.setTransactionStatus(false);
					formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
					
					forwardAction = ActionConstant.SHOW_AJAX_ADD;

				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE)) {
					//populateModel
					MonitorDoctor model = (MonitorDoctor) formBean.populateModel(formBean);
					
					User user = (User) request.getSession().getAttribute(MiscConstant.USER_SESSION);
					
					HashMap<String,Object> dataMap = new HashMap<String, Object>();
			        dataMap.put(MapConstant.MODULE, module);
			        dataMap.put(MapConstant.CLASS_DATA, model);
			        dataMap.put(MapConstant.USER_SESSION_DATA, user);
			        dataMap.put(MapConstant.ACTION, ActionConstant.SAVE);
			          
			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
			        
			        if (resultMap!=null && !resultMap.isEmpty()) {
			        	//check resultmap action status
			        	boolean transactionStatus = (boolean) resultMap.get(MapConstant.TRANSACTION_STATUS);

			        	formBean.setTransactionStatus(transactionStatus);
			        	
			        			
			        	if (transactionStatus) {
			        		//show success page
			        		//add confirmation message
			        				        		
			        		if (dataMap.get(MapConstant.ACTION).equals(ActionConstant.SAVE)) {
			        			formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_SAVED);
			        			PIBSUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_SAVED+" - "+module);
			        			//logger.info(MiscConstant.TRANS_MESSSAGE_SAVED);
			        		}else {
			        			formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_UPDATED);
			        			PIBSUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_UPDATED+" - "+module);
			        			//logger.info(MiscConstant.TRANS_MESSSAGE_UPDATED);
			        		}
			        		

			        		//update the list in the form
			        		service = null;
			        		resultMap = null;
			        		
			        		model = new MonitorDoctor();
							model.setPatientCaseSystemId(formBean.getPatientCaseSystemId());
							
							dataMap = new HashMap<String, Object>();
					        dataMap.put(MapConstant.MODULE, module);
					        dataMap.put(MapConstant.CLASS_DATA, model);
					        dataMap.put(MapConstant.ACTION, ActionConstant.SEARCHBY);
					        
					        service = new ServiceManagerImpl();
					        resultMap = service.executeRequest(dataMap);
							
					        if (resultMap!=null && !resultMap.isEmpty()) {
						        @SuppressWarnings("unchecked")
								List<MonitorDoctor> rsList =  (ArrayList<MonitorDoctor>) resultMap.get(MapConstant.CLASS_LIST);		        		
					        	formBean.populateEntityList(rsList);
					        }
			        		
			        		forwardAction = ActionConstant.AJAX_SUCCESS;
			        	} else {
			        		formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_ERROR);
			        		//logger.info(MiscConstant.TRANS_MESSSAGE_ERROR);
			        		PIBSUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_ERROR+" - "+module);
			        		forwardAction = ActionConstant.AJAX_FAILED;
			        	}
			        }
					
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_DELETE)) {

					//fetch the data
					
					int id = Integer.parseInt(request.getParameter("id"));
					
					User user = (User) request.getSession().getAttribute(MiscConstant.USER_SESSION);
					
					MonitorDoctor model = new MonitorDoctor();
					model.setId(id);
					
					HashMap<String,Object> dataMap = new HashMap<String, Object>();
			        dataMap.put(MapConstant.MODULE, module);
			        dataMap.put(MapConstant.CLASS_DATA, model);
			        dataMap.put(MapConstant.ACTION, ActionConstant.DELETE);
			        dataMap.put(MapConstant.USER_SESSION_DATA, user);
			        
			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
					
			        if (resultMap!=null && !resultMap.isEmpty()) {
			        	//check resultmap action status
			        	boolean transactionStatus = (boolean) resultMap.get(MapConstant.TRANSACTION_STATUS);

			        	formBean.setTransactionStatus(transactionStatus);
			        	
			        	if (transactionStatus) {
			        		//show success page
			        		//add confirmation message
			        		formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_DELETED);

			        		//logger.info(MiscConstant.TRANS_MESSSAGE_DELETED);
			        		PIBSUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_DELETED+" - "+module);
			        		forwardAction = ActionConstant.AJAX_SUCCESS;
			        	} else {
			        		formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_ERROR);
			        		//logger.info(MiscConstant.TRANS_MESSSAGE_ERROR);
			        		PIBSUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_ERROR+" - "+module);
			        		forwardAction = ActionConstant.AJAX_FAILED;
			        	}
			        }
				}
			} else {
				//show main screen
				 forwardAction = ActionConstant.SHOW_AJAX_MAIN;
			}
			
		}
		
		return mapping.findForward(forwardAction);
	}	
	


}
