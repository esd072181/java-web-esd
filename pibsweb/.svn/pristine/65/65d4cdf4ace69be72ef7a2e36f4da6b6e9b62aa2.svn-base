package com.pibs.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.pibs.util.PIBSUtils;
import com.pibs.config.ServerContext;
import com.pibs.constant.MapConstant;
import com.pibs.constant.MiscConstant;
import com.pibs.dao.RptPatientDao;
import com.pibs.model.Patient;
import com.pibs.util.DateUtils;

/**
 * 
 * @author dward
 * @since 17May2018
 */
public class RptPatientDaoImpl implements RptPatientDao {
	
	private final static Logger logger = Logger.getLogger(RptPatientDaoImpl.class);

	@Override
	public Map<String, Object> search(HashMap<String, Object> criteriaMap)
			throws Exception {
		 
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SEARCH);
		 
		 	Map<String, Object> returnMap = null;

		 	 //Connection using JNDI DBCP
			 //get the criteria and value
		 	 int searchCriteria = Integer.parseInt((String)criteriaMap.get(MapConstant.SEARCH_CRITERIA));
			 String searchValue = (String) criteriaMap.get(MapConstant.SEARCH_VALUE);
			 String dateFromValue = (String) criteriaMap.get(MapConstant.DATE_FROM_VALUE);
			 String dateToValue = (String) criteriaMap.get(MapConstant.DATE_TO_VALUE);
			 
			 Connection conn = null;
			 ResultSet rs = null;
			 PreparedStatement pstmt = null;
			 
			 List<Patient> rsList = new ArrayList<>();
					  
			 try {
				 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = null;
				 		
				 sql = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middleName,a.gender,a.birthday,a.contactno,a.address,a.contactperson,a.contactpersonno,a.dateregistered,b.listvalue as status,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
				 	sql.append(" from pibs.file_patient_info a, pibs.list_value b ");
				 	sql.append(" where a.patientstatusid = b.id ");
				 	sql.append(" and a.active = true ");
			    	if (MiscConstant.LOV_PATIENT_REPORT_SEARCH_CRITERIA_PATIENT_NO == searchCriteria) {
			    		sql.append(" and a.patientid ilike '%"+searchValue+"%' ");
			    	}
			    	if (MiscConstant.LOV_PATIENT_REPORT_SEARCH_CRITERIA_LAST_NAME == searchCriteria) {
			    		sql.append(" and a.lastname ilike '%"+searchValue+"%' ");
			    	}
			    	if (MiscConstant.LOV_PATIENT_REPORT_SEARCH_CRITERIA_FIRST_NAME == searchCriteria) {
			    		sql.append(" and a.firstname ilike '%"+searchValue+"%' ");
			    	}
			    	if (MiscConstant.LOV_PATIENT_REPORT_SEARCH_CRITERIA_ADDRESS == searchCriteria) {
			    		sql.append(" and a.address ilike '%"+searchValue+"%' ");
			    	}
			    	if (MiscConstant.LOV_PATIENT_REPORT_SEARCH_CRITERIA_STATUS == searchCriteria) {
			    		sql.append(" and b.listvalue ilike '%"+searchValue+"%'");
			    	}
			    	else if (MiscConstant.LOV_PATIENT_REPORT_SEARCH_CRITERIA_DATE_REGISTERED == searchCriteria) {
				 		sql.append(" and to_date(a.dateregistered,'MM/DD/YYYY') between '"+DateUtils.sqlDateToStringSQL(DateUtils.strToSQLDate(dateFromValue))+"' and '"+DateUtils.sqlDateToStringSQL(DateUtils.strToSQLDate(dateToValue))+"'");
				 	}
				 	sql.append(" order by a.lastname ");
						
						 
				PIBSUtils.writeLogDebug(logger, "SQL: "+sql.toString());
					
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 rs = pstmt.executeQuery();
				 
				 while(rs.next()) {
					 Patient model=new Patient();  
		    		 model.setId(rs.getInt(1));
		    		 model.setPatientId(rs.getString(2));
		    		 model.setLastName(rs.getString(3));
		    		 model.setFirstName(rs.getString(4));
		    		 model.setMiddleName(rs.getString(5));
		    		 model.setGender(rs.getString(6));
		    		 model.setBirthday(rs.getDate(7));
		    		 model.setContactNo(rs.getString(8));
		    		 model.setAddress(rs.getString(9));
		    		 model.setContactPerson(rs.getString(10));
		    		 model.setContactPersonNo(rs.getString(11));
		    		 model.setDateRegistered(rs.getString(12));
		    		 model.setStatus(rs.getString(13));
		    		 if (model.getBirthday()!=null) {
		    			 model.setBirthdayStr(DateUtils.sqlDateToString(model.getBirthday()));		    			 
		    		 }
		    		 model.setFullName();
			    	 rsList.add(model);
				 }				 
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }
			 
		     
		     if (rsList!=null && !rsList.isEmpty()) {
		    	 returnMap = new HashMap<String, Object>();
		    	 returnMap.put(MapConstant.CLASS_LIST, rsList);
		     } 
	     
	    System.out.println("search() - Exit");
		return returnMap;
	}

}
