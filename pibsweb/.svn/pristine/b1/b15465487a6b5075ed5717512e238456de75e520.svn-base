package com.pibs.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.pibs.config.ServerContext;
import com.pibs.constant.ActionConstant;
import com.pibs.constant.MapConstant;
import com.pibs.constant.MiscConstant;
import com.pibs.constant.ModuleConstant;
import com.pibs.dao.PatientDao;
import com.pibs.model.Patient;
import com.pibs.model.Room;
import com.pibs.model.User;
import com.pibs.service.ServiceManager;
import com.pibs.service.ServiceManagerImpl;
import com.pibs.util.PIBSUtils;

public class PatientDaoImpl implements PatientDao {
	
	private final static Logger logger = Logger.getLogger(PatientDaoImpl.class);

	@SuppressWarnings("resource")
	@Override
	public Map<String, Object> save(HashMap<String, Object> dataMap) throws Exception{
		
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SAVE);
		
		//DBCP JNDI
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		boolean status = false;
		
		Patient model = (Patient) dataMap.get(MapConstant.CLASS_DATA);
		User user = (User) dataMap.get(MapConstant.USER_SESSION_DATA);
		
		if (user!=null) {
			model.setCreatedBy((int) user.getId());	
		}
		model.setCreatedOn(new Timestamp(new java.util.Date().getTime()));
		
		StringBuffer qry =  new StringBuffer("insert into pibs.file_patient_info (");  		
				qry.append("patientid ");
		  		qry.append(",lastname ");
		  		qry.append(",firstname ");
		  		qry.append(",middlename ");
		  		qry.append(",gender ");
		  		qry.append(",birthday ");
		  		qry.append(",contactno ");
		  		qry.append(",address ");
		  		qry.append(",contactperson ");
		  		qry.append(",contactpersonno ");
		  		qry.append(",dateregistered ");
		  		qry.append(",patientstatusid ");
		  		qry.append(",createdby ");
		  		qry.append(",createdon ");
		  		qry.append(",version ");
		  		qry.append(",active ");
		  		qry.append(" ) ");
		  		qry.append(" values ");
		  		qry.append(" ( ");
		  		qry.append(" ? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,? ");
		  		qry.append(" ,1 ");
		  		qry.append(" ,true ");
		  		qry.append(" ) ");

		StringBuffer qryLog =  new StringBuffer("insert into pibs.file_patient_info (");
				qryLog.append("patientid ");
				qryLog.append(",lastname ");
				qryLog.append(",firstname ");
				qryLog.append(",middlename ");
				qryLog.append(",gender ");
				qryLog.append(",birthday ");
				qryLog.append(",contactno ");
				qryLog.append(",address ");
				qryLog.append(",contactperson ");
				qryLog.append(",contactpersonno ");
				qryLog.append(",dateregistered ");
				qryLog.append(",patientstatusid ");
				qryLog.append(",createdby ");
				qryLog.append(",createdon ");
				qryLog.append(",version ");
				qryLog.append(",active ");
				qryLog.append(" ) ");
				qryLog.append(" values ");
				qryLog.append(" ( ");
				qryLog.append(model.getPatientId());
				qryLog.append(" ,"+model.getLastName());
				qryLog.append(" ,"+model.getFirstName());
				qryLog.append(" ,"+model.getMiddleName());
				qryLog.append(" ,"+model.getGender());
				qryLog.append(" ,"+model.getBirthday());
				qryLog.append(" ,"+model.getContactNo());
				qryLog.append(" ,"+model.getAddress());
				qryLog.append(" ,"+model.getContactPerson());
				qryLog.append(" ,"+model.getContactPersonNo());
				qryLog.append(" ,"+model.getDateRegistered());
				qryLog.append(" ,"+model.getPatientStatusId());
				qryLog.append(" ,"+model.getCreatedBy());
				qryLog.append(" ,"+model.getCreatedOn());
				qryLog.append(" ,1 ");
				qryLog.append(" ,true ");
				qryLog.append(" ) ");
					
		PIBSUtils.writeLogDebug(logger, "SQL: "+qryLog.toString());
  		  		
		  try {
			  conn = ServerContext.getJDBCHandle();
			  conn.setAutoCommit(false);
			  pstmt = conn.prepareStatement(qry.toString());
			     
			  pstmt.setString(1, model.getPatientId());
			  pstmt.setString(2, model.getLastName());
			  pstmt.setString(3, model.getFirstName());
			  pstmt.setString(4, model.getMiddleName());
			  pstmt.setString(5, model.getGender());
			  pstmt.setDate(6, model.getBirthday());
			  pstmt.setString(7, model.getContactNo());
			  pstmt.setString(8, model.getAddress());
			  pstmt.setString(9, model.getContactPerson());
			  pstmt.setString(10, model.getContactPersonNo());
			  pstmt.setDate(11, model.getDateRegistered());
			  pstmt.setInt(12, model.getPatientStatusId());
			  pstmt.setInt(13, model.getCreatedBy());
			  pstmt.setTimestamp(14, model.getCreatedOn());
			     
			  int statusInt = pstmt.executeUpdate();
			     
			  if (statusInt == 1) {
				  conn.commit();
				  System.out.println("Inserted into Patient table successfully..");
				  status = true;
				  
				  //update the model to set the id for the form bean
				  StringBuffer qrySelect =  new StringBuffer("select id from pibs.file_patient_info where patientid = ?");
				  PIBSUtils.writeLogDebug(logger, "SQL Select: "+qrySelect.toString());
				  try {
					  pstmt = conn.prepareStatement(qrySelect.toString());
					  pstmt.setString(1, model.getPatientId());
					  rs = pstmt.executeQuery(); 
					  if (rs.next()) {
							 model.setId(rs.getInt(1));
				      }
				  } catch (Exception e) {
					  e.printStackTrace();
				  }
			  }
		  } catch (Exception e) {
			  conn.rollback();
		 	  e.printStackTrace();
		  } finally {
			  PIBSUtils.closeObjects(rs);
			  PIBSUtils.closeObjects(pstmt);
			  PIBSUtils.closeObjects(conn);
		  }
		 		
		returnMap.put(MapConstant.TRANSACTION_STATUS, status);
		returnMap.put(MapConstant.CLASS_DATA, model);
		     
		return returnMap;
	}

	@Override
	public Map<String, Object> update(HashMap<String, Object> dataMap) throws Exception{
		// TODO Auto-generated method stub
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_UPDATE);
		 
		//DBCP JNDI
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		boolean status = false;
		
		Patient model = (Patient) dataMap.get(MapConstant.CLASS_DATA);
		User user = (User) dataMap.get(MapConstant.USER_SESSION_DATA);
		
		if (user!=null) {
			model.setModifiedBy((int) user.getId());	
		}
		model.setModifiedOn(new Timestamp(new java.util.Date().getTime()));
		
		StringBuffer qry =  new StringBuffer("update pibs.file_patient_info set ");	
			qry.append(" patientid=? ");
			qry.append(" ,lastname=? ");
			qry.append(" ,firstname=? ");
			qry.append(" ,middlename=? ");
			qry.append(" ,gender=? ");
			qry.append(" ,birthday=? ");
			qry.append(" ,contactno=? ");
			qry.append(" ,address=? ");
			qry.append(" ,contactperson=? ");
			qry.append(" ,contactpersonno=? ");
			qry.append(" ,dateregistered=? ");
			qry.append(" ,patientstatusid=? ");
			qry.append(" ,modifiedby=? ");
			qry.append(" ,modifiedon=? ");
			qry.append(" ,version=(version+1) ");
			qry.append(" where ");
			qry.append(" id = ? ");

		StringBuffer qryLog =  new StringBuffer("update pibs.file_patient_info set ");		
			qryLog.append(" patientid="+model.getPatientId());
			qryLog.append(" ,lastname="+model.getLastName());
			qryLog.append(" ,firstname="+model.getFirstName());
			qryLog.append(" ,middlename="+model.getMiddleName());
			qryLog.append(" ,gender="+model.getGender());
			qryLog.append(" ,birthday="+model.getBirthday());
			qryLog.append(" ,contactno="+model.getContactNo());
			qryLog.append(" ,address="+model.getAddress());
			qryLog.append(" ,contactperson="+model.getContactPerson());
			qryLog.append(" ,contactpersonno="+model.getContactPersonNo());
			qryLog.append(" ,dateregistered="+model.getDateRegistered());
			qryLog.append(" ,patientstatusid="+model.getPatientStatusId());
			qryLog.append(" ,modifiedby="+model.getModifiedBy());
			qryLog.append(" ,modifiedon="+model.getModifiedOn());
			qryLog.append(" ,version=(version+1) ");
			qryLog.append(" where ");
			qryLog.append(" id = "+model.getId());
			
		PIBSUtils.writeLogDebug(logger, "SQL: "+qryLog.toString());
	
		 try {
			conn = ServerContext.getJDBCHandle();
			conn.setAutoCommit(false);
			pstmt = conn.prepareStatement(qry.toString());
				     
			pstmt.setString(1, model.getPatientId());
			pstmt.setString(2, model.getLastName());
			pstmt.setString(3, model.getFirstName());
			pstmt.setString(4, model.getMiddleName());
			pstmt.setString(5, model.getGender());
			pstmt.setDate(6, model.getBirthday());
			pstmt.setString(7, model.getContactNo());
			pstmt.setString(8, model.getAddress());
			pstmt.setString(9, model.getContactPerson());
			pstmt.setString(10, model.getContactPersonNo());
			pstmt.setDate(11, model.getDateRegistered());
			pstmt.setInt(12, model.getPatientStatusId());
			pstmt.setInt(13, model.getModifiedBy());
			pstmt.setTimestamp(14, model.getModifiedOn());
			pstmt.setLong(15, model.getId());
				     
			int statusInt = pstmt.executeUpdate();
				     
			if (statusInt == 1) {
				conn.commit();
				System.out.println("Patient record (id: " +model.getId()+") updated successfully..");
				status = true;
			}
		} catch (Exception e) {
			conn.rollback();
			e.printStackTrace();
		} finally {
			PIBSUtils.closeObjects(rs);
			PIBSUtils.closeObjects(pstmt);
			PIBSUtils.closeObjects(conn);
		}
			 		
		returnMap.put(MapConstant.TRANSACTION_STATUS, status);	
		
		return returnMap;
	}

	@Override
	public Map<String, Object> delete(HashMap<String, Object> dataMap) throws Exception{
		// TODO Auto-generated method stub
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_DELETE);

		
		//DBCP JNDI
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		boolean status = false;
		
		Patient model = (Patient) dataMap.get(MapConstant.CLASS_DATA);
		User user = (User) dataMap.get(MapConstant.USER_SESSION_DATA);
		
		if (user!=null) {
			model.setModifiedBy((int) user.getId());	
		}
		model.setModifiedOn(new Timestamp(new java.util.Date().getTime()));
		
		StringBuffer qry =  new StringBuffer("update pibs.file_patient_info set ");	
			qry.append(" active=false ");
			qry.append(" ,modifiedby=? ");
			qry.append(" ,modifiedon=? ");
			qry.append(" ,version=(version+1) ");
			qry.append(" where ");
			qry.append(" id = ? ");

		StringBuffer qryLog =  new StringBuffer("update pibs.file_patient_info set ");	
			qryLog.append(" active=false ");
			qryLog.append(" ,modifiedby="+model.getModifiedBy());
			qryLog.append(" ,modifiedon="+model.getModifiedOn());
			qryLog.append(" ,version=(version+1) ");
			qryLog.append(" where ");
			qryLog.append(" id = "+model.getId());
			
		PIBSUtils.writeLogDebug(logger, "SQL: "+qryLog.toString());
	
		 try {
			conn = ServerContext.getJDBCHandle();
			conn.setAutoCommit(false);
			pstmt = conn.prepareStatement(qry.toString());
				     
			pstmt.setInt(1, model.getModifiedBy());
			pstmt.setTimestamp(2, model.getModifiedOn());
			pstmt.setLong(3, model.getId());
				     
			int statusInt = pstmt.executeUpdate();
				     
			if (statusInt == 1) {
				conn.commit();
				System.out.println("Patient record (id: " +model.getId()+") deleted successfully..");
				status = true;
			}
		} catch (Exception e) {
			conn.rollback();
			e.printStackTrace();
		} finally {
			PIBSUtils.closeObjects(rs);
			PIBSUtils.closeObjects(pstmt);
			PIBSUtils.closeObjects(conn);
		}
			 		
		returnMap.put(MapConstant.TRANSACTION_STATUS, status);			
		
		return returnMap;
	}

	@Override
	public Map<String, Object> search(HashMap<String, Object> criteriaMap) throws Exception{
		 
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SEARCH);
		 
		 	Map<String, Object> returnMap = null;

		 	//Connection using JNDI DBCP
			 //get the pagination and offset
			 int offset = (int) criteriaMap.get(MapConstant.PAGINATION_OFFSET);
			 int limit = (int) criteriaMap.get(MapConstant.PAGINATION_LIMIT);
			 
			 //get the category
			 String category = (String) criteriaMap.get(MapConstant.ACTION);
			 String criteria = (String) criteriaMap.get(MapConstant.SEARCH_CRITERIA);
			 
			 Connection conn = null;
			 ResultSet rs = null;;
			 PreparedStatement pstmt = null;
			 
			  List<Patient> rsList = new ArrayList<Patient>();
					  
			 try {
				 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = null;
				 if (category.equals(ActionConstant.SEARCHALL)) {
					 sql = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
					 	sql.append(" from pibs.file_patient_info a, pibs.list_value b ");
					 	sql.append(" where a.patientstatusid = b.id ");
					 	sql.append(" and a.active = true ");
					 	sql.append(" order by a.lastname,a.firstname ");
					 	sql.append(" limit ? ");
					 	sql.append(" offset ?");		 
				 } else {
					 sql = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
					    sql.append(" from pibs.file_patient_info a, pibs.list_value b ");
					 	sql.append(" where a.patientstatusid = b.id ");  
					 	sql.append(" and (a.lastname ilike '%"+criteria+"%' or a.firstname ilike '%"+criteria+"%' or a.middlename ilike '%"+criteria+"%')" );
					 	sql.append(" and a.active = true ");
					 	sql.append(" order by a.lastname,a.firstname ");
					 	sql.append(" limit ? ");
					 	sql.append(" offset ?");	
				 }


				StringBuffer sqlLog = null;
						 
				if (category.equals(ActionConstant.SEARCHALL)) {
							 sqlLog = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
							 sqlLog.append(" from pibs.file_patient_info a, pibs.list_value b ");
							 sqlLog.append(" where a.patientstatusid = b.id ");
							 sqlLog.append(" and a.active = true ");
							 sqlLog.append(" order by a.lastname,a.firstname ");
							 sqlLog.append(" limit "+limit);
							 sqlLog.append(" offset "+offset);		 
				} else {
							 sqlLog = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
							 sqlLog.append(" from pibs.file_patient_info a, pibs.list_value b ");
							 sqlLog.append(" where a.patientstatusid = b.id ");
							 sqlLog.append(" and(a.lastname ilike '%"+criteria+"%' or a.firstname ilike '%"+criteria+"%' or a.middlename ilike '%"+criteria+"%')" );
							 sqlLog.append(" and a.active = true ");
							 sqlLog.append(" order by a.lastname,a.firstname ");
							 sqlLog.append(" limit "+limit);
							 sqlLog.append(" offset "+offset);	
				}
						 
				PIBSUtils.writeLogDebug(logger, "SQL: "+sqlLog.toString());
					
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 pstmt.setInt(1, limit);
				 pstmt.setInt(2, offset);
				 
				 rs = pstmt.executeQuery();
				 
				 while(rs.next()) {
					 Patient model=new Patient();  
		    		 model.setId(rs.getInt(1));
		    		 model.setPatientId(rs.getString(2));
		    		 model.setLastName(rs.getString(3));
		    		 model.setFirstName(rs.getString(4));
		    		 model.setMiddleName(rs.getString(5));
		    		 model.setGender(rs.getString(6));
		    		 model.setBirthday(rs.getDate(7));
		    		 model.setDateRegistered(rs.getDate(8));
		    		 model.setPatientStatusId(rs.getInt(9));
		    		 model.setStatus(rs.getString(10));
		    		 model.setContactNo(rs.getString(11));
		    		 model.setAddress(rs.getString(12));
		    		 model.setContactPerson(rs.getString(13));
		    		 model.setContactPersonNo(rs.getString(14));
		    		 rsList.add(model);
				 }				 
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }
			 
		     //get the total of records
		     int  totalNoOfRecords = 0;
		     StringBuffer sqlCount = null;
			 
		     try {
		    	 conn = ServerContext.getJDBCHandle();
		    	 
			     if (category.equals(ActionConstant.SEARCHALL)) {
			    	 sqlCount = new StringBuffer("select count(*) from pibs.file_patient_info where active = true");	 
			     }else {
			    	 sqlCount = new StringBuffer("select count(*) from pibs.file_patient_info where  (lastname ilike '%"+criteria+"%' or firstname ilike '%"+criteria+"%' or middlename ilike '%"+criteria+"%') and active = true");	 
			     } 

				StringBuffer sqlCountLog = null;
				if (category.equals(ActionConstant.SEARCHALL)) {
					 sqlCountLog = new StringBuffer("select count(*) from pibs.file_patient_info where active = true");	 
				}else {
					 sqlCountLog = new StringBuffer("select count(*) from pibs.file_patient_info where  (lastname ilike '%"+criteria+"%' or firstname ilike '%"+criteria+"%' or middlename ilike '%"+criteria+"%') and active = true");	 
				} 
					
				PIBSUtils.writeLogDebug(logger, "SQL: "+sqlCountLog.toString());
				
		    	 pstmt = conn.prepareStatement(sqlCount.toString());
		    	 
		    	 rs = pstmt.executeQuery();
		    	 if (rs.next()) {
		    		 totalNoOfRecords = rs.getInt(1);
		    	 }
		    			
		     } catch (SQLException e) {
		    	 throw e;
		     } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
		     }
		     
		     if (rsList!=null && !rsList.isEmpty()) {
		    	 returnMap = new HashMap<String, Object>();
		    	 returnMap.put(MapConstant.CLASS_LIST, rsList);
		    	 returnMap.put(MapConstant.PAGINATION_TOTALRECORDS, totalNoOfRecords);
		     } 
	     
	    System.out.println("searchAll() - Exit");
		return returnMap;
	}

	@Override
	public Map<String, Object> getDataById(HashMap<String, Object> criteriaMap)
			throws Exception {
		// TODO Auto-generated method stub
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_GETDATA_BY_ID);
		 
		    //get the model criteria
		    Patient model = (Patient) criteriaMap.get(MapConstant.CLASS_DATA);

		 	//Connection using JNDI DBCP
			 Connection conn = null;
			 ResultSet rs = null;;
			 PreparedStatement pstmt = null;
		     Map<String, Object> returnMap = null;
					  
			 try {
				 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = new StringBuffer();				
				 	sql.append("select id,patientid,lastname,firstname,middlename,gender,birthday,dateregistered,patientstatusid,contactno,address,contactperson,contactpersonno,createdby,createdon,modifiedby,modifiedon,version,active ");
				 	sql.append("from pibs.file_patient_info ");
				 	sql.append("where id = ?");

				 StringBuffer sqlLog = new StringBuffer();				
				 	sqlLog.append("select id,patientid,lastname,firstname,middlename,gender,birthday,dateregistered,patientstatusid,contactno,address,contactperson,contactpersonno,createdby,createdon,modifiedby,modifiedon,version,active ");
				 	sqlLog.append("from pibs.file_patient_info ");
				 	sqlLog.append("where id = "+ model.getId());
			
				 PIBSUtils.writeLogDebug(logger, "SQL: "+sqlLog.toString());
			
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 pstmt.setInt(1, model.getId());
				 
				 rs = pstmt.executeQuery();

				 while(rs.next()) {
		    		 model.setId(rs.getInt(1));
		    		 model.setPatientId(rs.getString(2));
		    		 model.setLastName(rs.getString(3));
		    		 model.setFirstName(rs.getString(4));
		    		 model.setMiddleName(rs.getString(5));
		    		 model.setGender(rs.getString(6));
		    		 model.setBirthday(rs.getDate(7));
		    		 model.setDateRegistered(rs.getDate(8));
		    		 model.setPatientStatusId(rs.getInt(9));
		    		 model.setContactNo(rs.getString(10));
		    		 model.setAddress(rs.getString(11));
		    		 model.setContactPerson(rs.getString(12));
		    		 model.setContactPersonNo(rs.getString(13));
				 }				 
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }	 
		 		     
		     if (model!=null) {
		    	 returnMap = new HashMap<String, Object>();
		    	 returnMap.put(MapConstant.CLASS_DATA, model);
		     } 
	     
	    System.out.println("getDataById() - Exit");
		return returnMap;
	}
	
	@Override
	public Map<String, Object> getActiveData() throws Exception {
		// TODO Auto-generated method stub
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_GET_ACTIVE_DATA);
		 
		 	//Connection using JNDI DBCP
			 Connection conn = null;
			 ResultSet rs = null;;
			 PreparedStatement pstmt = null;
		     Map<String, Object> returnMap = null;
			 List<Patient> rsList = new ArrayList<Patient>();
			  
			 try {
				 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
				 	sql.append(" from pibs.file_patient_info a, pibs.list_value b ");
				 	sql.append(" where a.patientstatusid = b.id ");
				 	sql.append(" and a.active = true ");
				 	sql.append(" order by a.lastname,a.firstname");

				 StringBuffer sqlLog = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
					 sqlLog.append(" from pibs.file_patient_info a, pibs.list_value b ");
					 sqlLog.append(" where a.patientstatusid = b.id ");
					 sqlLog.append(" and a.active = true ");
				  	 sqlLog.append(" order by a.lastname,a.firstname ");
			
				 PIBSUtils.writeLogDebug(logger, "SQL: "+sqlLog.toString());
			
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 rs = pstmt.executeQuery();

				 while(rs.next()) {
					 //get the model criteria
					 Patient model = new Patient();
		    		 model.setId(rs.getInt(1));
		    		 model.setPatientId(rs.getString(2));
		    		 model.setLastName(rs.getString(3));
		    		 model.setFirstName(rs.getString(4));
		    		 model.setMiddleName(rs.getString(5));
		    		 model.setGender(rs.getString(6));
		    		 model.setBirthday(rs.getDate(7));
		    		 model.setDateRegistered(rs.getDate(8));
		    		 model.setPatientStatusId(rs.getInt(9));
		    		 model.setStatus(rs.getString(10));
		    		 model.setContactNo(rs.getString(11));
		    		 model.setAddress(rs.getString(12));
		    		 model.setContactPerson(rs.getString(13));
		    		 model.setContactPersonNo(rs.getString(14));
		    		 rsList.add(model);
				 }				 
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }	 
		 		     
		     if (rsList!=null && !rsList.isEmpty()) {
		    	 returnMap = new HashMap<String, Object>();
		    	 returnMap.put(MapConstant.CLASS_LIST, rsList);
		     } 
	     
		return returnMap;
	}

	public static int getPatientCount() throws Exception{
		 
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SEARCH);

			 Connection conn = null;
			 ResultSet rs = null;;
			 PreparedStatement pstmt = null;
			 
			 int totalNoOfRecords = 0;
					  
			 try {
			 	 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = new StringBuffer("select count(id) from pibs.file_patient_info");
		 			 
				 PIBSUtils.writeLogDebug(logger, "SQL: "+sql.toString());
					
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 rs = pstmt.executeQuery();
				 
				 if (rs.next()) {
					 totalNoOfRecords = rs.getInt(1);
				 }				 
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }
			 
	    System.out.println("getPatientCount() - Exit");
		return totalNoOfRecords;
	}
	
	@Override
	public Map<String, Object> searchPatientForAdmission(HashMap<String, Object> criteriaMap) throws Exception{
		 
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SEARCH);
		 
		 	Map<String, Object> returnMap = null;

		 	//Connection using JNDI DBCP
			 //get the pagination and offset
			 int offset = (int) criteriaMap.get(MapConstant.PAGINATION_OFFSET);
			 int limit = (int) criteriaMap.get(MapConstant.PAGINATION_LIMIT);
			 
			 //get the category
			 String category = (String) criteriaMap.get(MapConstant.ACTION);
			 String criteria = (String) criteriaMap.get(MapConstant.SEARCH_CRITERIA);
			 
			 Connection conn = null;
			 ResultSet rs = null;;
			 PreparedStatement pstmt = null;
			 
			  List<Patient> rsList = new ArrayList<Patient>();
					  
			 try {
				 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = null;
				 if (category.equals(ActionConstant.SEARCHALL)) {
					 sql = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
					 	sql.append(" from pibs.file_patient_info a, pibs.list_value b ");
					 	sql.append(" where a.patientstatusid = b.id ");
					 	sql.append(" and a.active = true ");
					 	sql.append(" and a.patientstatusid = 501 ");
					 	sql.append(" order by a.lastname,a.firstname ");
					 	sql.append(" limit ? ");
					 	sql.append(" offset ?");		 
				 } else {
					 sql = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
					    sql.append(" from pibs.file_patient_info a, pibs.list_value b ");
					 	sql.append(" where a.patientstatusid = b.id ");  
					 	sql.append(" and (a.lastname ilike '%"+criteria+"%' or a.firstname ilike '%"+criteria+"%' or a.middlename ilike '%"+criteria+"%')" );
					 	sql.append(" and a.active = true ");
					 	sql.append(" and a.patientstatusid = 501 ");
					 	sql.append(" order by a.lastname,a.firstname ");
					 	sql.append(" limit ? ");
					 	sql.append(" offset ?");	
				 }


				StringBuffer sqlLog = null;
						 
				if (category.equals(ActionConstant.SEARCHALL)) {
							 sqlLog = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
							 sqlLog.append(" from pibs.file_patient_info a, pibs.list_value b ");
							 sqlLog.append(" where a.patientstatusid = b.id ");
							 sqlLog.append(" and a.active = true ");
							 sqlLog.append(" and a.patientstatusid = 501 ");
							 sqlLog.append(" order by a.lastname,a.firstname ");
							 sqlLog.append(" limit "+limit);
							 sqlLog.append(" offset "+offset);		 
				} else {
							 sqlLog = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.dateregistered,a.patientstatusid,b.listvalue,a.contactno,a.address,a.contactperson,a.contactpersonno,a.createdby,a.createdon,a.modifiedby,a.modifiedon,a.version,a.active ");
							 sqlLog.append(" from pibs.file_patient_info a, pibs.list_value b ");
							 sqlLog.append(" where a.patientstatusid = b.id ");
							 sqlLog.append(" and(a.lastname ilike '%"+criteria+"%' or a.firstname ilike '%"+criteria+"%' or a.middlename ilike '%"+criteria+"%')" );
							 sqlLog.append(" and a.active = true ");
							 sqlLog.append(" and a.patientstatusid = 501 ");
							 sqlLog.append(" order by a.lastname,a.firstname ");
							 sqlLog.append(" limit "+limit);
							 sqlLog.append(" offset "+offset);	
				}
						 
				PIBSUtils.writeLogDebug(logger, "SQL: "+sqlLog.toString());
					
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 pstmt.setInt(1, limit);
				 pstmt.setInt(2, offset);
				 
				 rs = pstmt.executeQuery();
				 
				 while(rs.next()) {
					 Patient model=new Patient();  
		    		 model.setId(rs.getInt(1));
		    		 model.setPatientId(rs.getString(2));
		    		 model.setLastName(rs.getString(3));
		    		 model.setFirstName(rs.getString(4));
		    		 model.setMiddleName(rs.getString(5));
		    		 model.setGender(rs.getString(6));
		    		 model.setBirthday(rs.getDate(7));
		    		 model.setDateRegistered(rs.getDate(8));
		    		 model.setPatientStatusId(rs.getInt(9));
		    		 model.setStatus(rs.getString(10));
		    		 model.setAddress(rs.getString(12));
		    		 rsList.add(model);
				 }				 
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }
			 
		     //get the total of records
		     int  totalNoOfRecords = 0;
		     StringBuffer sqlCount = null;
			 
		     try {
		    	 conn = ServerContext.getJDBCHandle();
		    	 
			     if (category.equals(ActionConstant.SEARCHALL)) {
			    	 sqlCount = new StringBuffer("select count(*) from pibs.file_patient_info where active = true and patientstatusid = 501");	 
			     }else {
			    	 sqlCount = new StringBuffer("select count(*) from pibs.file_patient_info where  (lastname ilike '%"+criteria+"%' or firstname ilike '%"+criteria+"%' or middlename ilike '%"+criteria+"%') and active = true and patientstatusid = 501");	 
			     } 

				StringBuffer sqlCountLog = null;
				if (category.equals(ActionConstant.SEARCHALL)) {
					 sqlCountLog = new StringBuffer("select count(*) from pibs.file_patient_info where active = true and patientstatusid = 501");	 
				}else {
					 sqlCountLog = new StringBuffer("select count(*) from pibs.file_patient_info where  (lastname ilike '%"+criteria+"%' or firstname ilike '%"+criteria+"%' or middlename ilike '%"+criteria+"%') and active = true and patientstatusid = 501");	 
				} 
					
				PIBSUtils.writeLogDebug(logger, "SQL: "+sqlCountLog.toString());
				
		    	 pstmt = conn.prepareStatement(sqlCount.toString());
		    	 
		    	 rs = pstmt.executeQuery();
		    	 if (rs.next()) {
		    		 totalNoOfRecords = rs.getInt(1);
		    	 }
		    			
		     } catch (SQLException e) {
		    	 throw e;
		     } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
		     }
		     
		     if (rsList!=null && !rsList.isEmpty()) {
		    	 returnMap = new HashMap<String, Object>();
		    	 returnMap.put(MapConstant.CLASS_LIST, rsList);
		    	 returnMap.put(MapConstant.PAGINATION_TOTALRECORDS, totalNoOfRecords);
		     } 
	     
	    System.out.println("searchPatientForAdmission() - Exit");
		return returnMap;
	}

	@Override
	public Map<String, Object> searchPatientAdmitted(HashMap<String, Object> criteriaMap) throws Exception{
		 
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_SEARCH);
		 
		 	Map<String, Object> returnMap = null;

		 	//Connection using JNDI DBCP
			 //get the pagination and offset
			 int offset = (int) criteriaMap.get(MapConstant.PAGINATION_OFFSET);
			 int limit = (int) criteriaMap.get(MapConstant.PAGINATION_LIMIT);
			 
			 //get the category
			 String category = (String) criteriaMap.get(MapConstant.ACTION);
			 String criteria = (String) criteriaMap.get(MapConstant.SEARCH_CRITERIA);
			 
			 Connection conn = null;
			 ResultSet rs = null;;
			 PreparedStatement pstmt = null;
			 
			  List<Patient> rsList = new ArrayList<Patient>();
					  
			 try {
				 conn = ServerContext.getJDBCHandle();

				 StringBuffer sql = null;
				 if (category.equals(ActionConstant.SEARCH_ALL_PATIENT_ADMITTED)) {
					 sql = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.address,b.dateofcase,b.caseno,b.id ");
					 	sql.append(" from pibs.file_patient_info a, pibs.tran_patient_case b ");
					 	sql.append(" where a.id = b.patientsystemid and b.patientcasestatusid=702");
					 	sql.append(" and a.active = true ");
					 	sql.append(" and b.active = true ");
					 	sql.append(" and a.patientstatusid = 502 ");
					 	sql.append(" order by a.lastname,a.firstname ");
					 	sql.append(" limit ? ");
					 	sql.append(" offset ?");		 
				 } else {
					 sql = new StringBuffer("select a.id,a.patientid,a.lastname,a.firstname,a.middlename,a.gender,a.birthday,a.address,b.dateofcase,b.caseno,b.id ");
					 	sql.append(" from pibs.file_patient_info a, pibs.tran_patient_case b ");
					 	sql.append(" where a.id = b.patientsystemid and b.patientcasestatusid=702");
					 	sql.append(" and (a.lastname ilike '%"+criteria+"%' or a.firstname ilike '%"+criteria+"%' or a.middlename ilike '%"+criteria+"%')" );
					 	sql.append(" and a.active = true ");
					 	sql.append(" and b.active = true ");
					 	sql.append(" and a.patientstatusid = 502 ");
					 	sql.append(" order by a.lastname,a.firstname ");
					 	sql.append(" limit ? ");
					 	sql.append(" offset ?");	
				 }
						 
				PIBSUtils.writeLogDebug(logger, "SQL: "+sql.toString());
					
				 pstmt = conn.prepareStatement(sql.toString());
				 
				 pstmt.setInt(1, limit);
				 pstmt.setInt(2, offset);
				 
				 rs = pstmt.executeQuery();
				 
				 while(rs.next()) {
					 Patient model=new Patient();  
		    		 model.setId(rs.getInt(1));
		    		 model.setPatientId(rs.getString(2));
		    		 model.setLastName(rs.getString(3));
		    		 model.setFirstName(rs.getString(4));
		    		 model.setMiddleName(rs.getString(5));
		    		 model.setGender(rs.getString(6));
		    		 model.setBirthday(rs.getDate(7));
		    		 model.setAddress(rs.getString(8));
		    		 model.setDateAdmitted(rs.getDate(9));
		    		 model.setCaseNo(rs.getString(10));
		    		 model.setPatientCaseSystemId(rs.getInt(11));
		    		 rsList.add(model);
				 }				 
			 } catch (SQLException e) {
				 throw e;
			 } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
			 }
			 
		     //get the total of records
		     int  totalNoOfRecords = 0;
		     StringBuffer sqlCount = null;
			 
		     try {
		    	 conn = ServerContext.getJDBCHandle();
		    	 
			     if (category.equals(ActionConstant.SEARCH_ALL_PATIENT_ADMITTED)) {
			    	 sqlCount = new StringBuffer("select count(*) from pibs.file_patient_info where active = true and patientstatusid = 502");	 
			     }else {
			    	 sqlCount = new StringBuffer("select count(*) from pibs.file_patient_info where  (lastname ilike '%"+criteria+"%' or firstname ilike '%"+criteria+"%' or middlename ilike '%"+criteria+"%') and active = true and patientstatusid = 502");	 
			     } 

				StringBuffer sqlCountLog = null;
				if (category.equals(ActionConstant.SEARCH_ALL_PATIENT_ADMITTED)) {
					 sqlCountLog = new StringBuffer("select count(*) from pibs.file_patient_info where active = true and patientstatusid = 502");	 
				}else {
					 sqlCountLog = new StringBuffer("select count(*) from pibs.file_patient_info where  (lastname ilike '%"+criteria+"%' or firstname ilike '%"+criteria+"%' or middlename ilike '%"+criteria+"%') and active = true and patientstatusid = 502");	 
				} 
					
				PIBSUtils.writeLogDebug(logger, "SQL: "+sqlCountLog.toString());
				
		    	 pstmt = conn.prepareStatement(sqlCount.toString());
		    	 
		    	 rs = pstmt.executeQuery();
		    	 if (rs.next()) {
		    		 totalNoOfRecords = rs.getInt(1);
		    	 }
		    			
		     } catch (SQLException e) {
		    	 throw e;
		     } finally {
				 PIBSUtils.closeObjects(rs);
				 PIBSUtils.closeObjects(pstmt);
				 PIBSUtils.closeObjects(conn);
		     }
		     
		     if (rsList!=null && !rsList.isEmpty()) {
		    	 returnMap = new HashMap<String, Object>();
		    	 returnMap.put(MapConstant.CLASS_LIST, rsList);
		    	 returnMap.put(MapConstant.PAGINATION_TOTALRECORDS, totalNoOfRecords);
		     } 
	     
	    System.out.println("searchPatientForMonitorPatient() - Exit");
		return returnMap;
	}
	
	@Override
	public Map<String, Object> updateToAdmitted(HashMap<String, Object> dataMap) throws Exception{
		// TODO Auto-generated method stub
		PIBSUtils.writeLogInfo(logger, MiscConstant.LOGGING_MESSSAGE_UPDATE);
		 
		//DBCP JNDI
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Map<String, Object> returnMap = new HashMap<String, Object>();
		boolean status = false;
		
		Patient model = (Patient) dataMap.get(MapConstant.CLASS_DATA);
		User user = (User) dataMap.get(MapConstant.USER_SESSION_DATA);
		
		if (user!=null) {
			model.setModifiedBy((int) user.getId());	
		}
		model.setModifiedOn(new Timestamp(new java.util.Date().getTime()));
		
		StringBuffer qry =  new StringBuffer("update pibs.file_patient_info set ");	
			qry.append(" patientid=? ");
			qry.append(" ,lastname=? ");
			qry.append(" ,firstname=? ");
			qry.append(" ,middlename=? ");
			qry.append(" ,gender=? ");
			qry.append(" ,birthday=? ");
			qry.append(" ,contactno=? ");
			qry.append(" ,address=? ");
			qry.append(" ,contactperson=? ");
			qry.append(" ,contactpersonno=? ");
			qry.append(" ,dateregistered=? ");
			qry.append(" ,patientstatusid=? ");
			qry.append(" ,modifiedby=? ");
			qry.append(" ,modifiedon=? ");
			qry.append(" ,version=(version+1) ");
			qry.append(" where ");
			qry.append(" id = ? ");

		StringBuffer qryLog =  new StringBuffer("update pibs.file_patient_info set ");		
			qryLog.append(" patientid="+model.getPatientId());
			qryLog.append(" ,lastname="+model.getLastName());
			qryLog.append(" ,firstname="+model.getFirstName());
			qryLog.append(" ,middlename="+model.getMiddleName());
			qryLog.append(" ,gender="+model.getGender());
			qryLog.append(" ,birthday="+model.getBirthday());
			qryLog.append(" ,contactno="+model.getContactNo());
			qryLog.append(" ,address="+model.getAddress());
			qryLog.append(" ,contactperson="+model.getContactPerson());
			qryLog.append(" ,contactpersonno="+model.getContactPersonNo());
			qryLog.append(" ,dateregistered="+model.getDateRegistered());
			qryLog.append(" ,patientstatusid="+model.getPatientStatusId());
			qryLog.append(" ,modifiedby="+model.getModifiedBy());
			qryLog.append(" ,modifiedon="+model.getModifiedOn());
			qryLog.append(" ,version=(version+1) ");
			qryLog.append(" where ");
			qryLog.append(" id = "+model.getId());
			
		PIBSUtils.writeLogDebug(logger, "SQL: "+qryLog.toString());
	
		 try {
			conn = ServerContext.getJDBCHandle();
			conn.setAutoCommit(false);
			pstmt = conn.prepareStatement(qry.toString());
				     
			pstmt.setString(1, model.getPatientId());
			pstmt.setString(2, model.getLastName());
			pstmt.setString(3, model.getFirstName());
			pstmt.setString(4, model.getMiddleName());
			pstmt.setString(5, model.getGender());
			pstmt.setDate(6, model.getBirthday());
			pstmt.setString(7, model.getContactNo());
			pstmt.setString(8, model.getAddress());
			pstmt.setString(9, model.getContactPerson());
			pstmt.setString(10, model.getContactPersonNo());
			pstmt.setDate(11, model.getDateRegistered());
			pstmt.setInt(12, model.getPatientStatusId());
			pstmt.setInt(13, model.getModifiedBy());
			pstmt.setTimestamp(14, model.getModifiedOn());
			pstmt.setLong(15, model.getId());
				     
			int statusInt = pstmt.executeUpdate();
				     
			if (statusInt == 1) {
				//update the available beds of room
				try {
					Room roomModel = new Room();
					roomModel.setId(model.getRoomId());
					HashMap<String,Object> roomDataMap = new HashMap<String, Object>();
					roomDataMap.put(MapConstant.MODULE, ModuleConstant.ROOM);
					roomDataMap.put(MapConstant.CLASS_DATA, roomModel);
					roomDataMap.put(MapConstant.USER_SESSION_DATA, user);
					roomDataMap.put(MapConstant.ACTION, ActionConstant.UPDATE_AVAILABLE_BEDS);

			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(roomDataMap);
			        
			        if (resultMap!=null && !resultMap.isEmpty()) {
			        	boolean transactionStatusforUpdate = (boolean) resultMap.get(MapConstant.TRANSACTION_STATUS);
				    	if (transactionStatusforUpdate) {
							conn.commit();
							System.out.println("Patient record (id: " +model.getId()+") updated successfully..");
							status = true;				    		
				    	}
			        } else {
			        	conn.rollback();
			        }
			        
			        dataMap = null;
			        resultMap = null;

				} catch (Exception e) {
					conn.rollback();
					e.printStackTrace();
				}
			}
		} catch (Exception e) {
			conn.rollback();
			e.printStackTrace();
		} finally {
			PIBSUtils.closeObjects(rs);
			PIBSUtils.closeObjects(pstmt);
			PIBSUtils.closeObjects(conn);
		}
			 		
		returnMap.put(MapConstant.TRANSACTION_STATUS, status);	
		
		return returnMap;
	}

	
}
