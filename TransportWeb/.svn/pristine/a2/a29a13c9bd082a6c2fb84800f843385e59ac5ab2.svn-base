package com.transport.form;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.upload.FormFile;

import com.transport.constant.ActionConstant;
import com.transport.constant.MapConstant;
import com.transport.constant.MiscConstant;
import com.transport.constant.ModuleConstant;
import com.transport.constant.ParamConstant;
import com.transport.model.Employee;
import com.transport.model.DriverTraining;
import com.transport.model.Terminal;
import com.transport.service.ServiceManager;
import com.transport.service.ServiceManagerImpl;
import com.transport.util.DateUtils;
import com.transport.util.TransportUtils;

/**
 * 
 * @author dward
 * @since 26Aug2019
 * UpdatedOn: 28Aug2019
 */
public class DriverTrainingFormBean extends TransportFormBean {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private int id;
	private String driverId;
	private String training1ExpiryDate;
	private String training2ExpiryDate;
	private String training3ExpiryDate;
	private String vnv;
	private String incab;
	private String spotcheck;
	private String terminalId;
	private String articulated;
	private String notes;
	private String incident;
	private String birthday;
	private String aodt;
	
	private FormFile file;
	private String picStr;
	private String age;
	
	private String searchValue;
	private String category;

	private int noOfPages;
	private int currentPage;
	private List<DriverTraining> modelList;
	
	private boolean transactionStatus;
	private String transactionMessage;
	
	private List<Terminal> terminalList;
	private List<Employee> driverList;
	

	public DriverTrainingFormBean() {}


	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public int getNoOfPages() {
		return noOfPages;
	}

	public void setNoOfPages(int noOfPages) {
		this.noOfPages = noOfPages;
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}

	public List<DriverTraining> getModelList() {
		return modelList;
	}

	public void setModelList(List<DriverTraining> modelList) {
		this.modelList = modelList;
	}

	public boolean isTransactionStatus() {
		return transactionStatus;
	}

	public void setTransactionStatus(boolean transactionStatus) {
		this.transactionStatus = transactionStatus;
	}

	public String getTransactionMessage() {
		return transactionMessage;
	}

	public void setTransactionMessage(String transactionMessage) {
		this.transactionMessage = transactionMessage;
	}
	
	public void populateFormBean(DriverTraining model) throws Exception {
		setId(model.getId());
		setDriverId(String.valueOf(model.getDriverId()));
		if (model.getTraining1ExpiryDate()!=null) {
			setTraining1ExpiryDate(DateUtils.sqlDateToString(model.getTraining1ExpiryDate()));
		}
		if (model.getTraining2ExpiryDate()!=null) {
			setTraining2ExpiryDate(DateUtils.sqlDateToString(model.getTraining2ExpiryDate()));
		}
		if (model.getTraining3ExpiryDate()!=null) {
			setTraining3ExpiryDate(DateUtils.sqlDateToString(model.getTraining3ExpiryDate()));
		}
		setPicStr(model.getPicStr());
		setVnv(model.getVnv());
		setIncab(model.getIncab());
		setSpotcheck(model.getSpotcheck());
		setTerminalId(String.valueOf(model.getTerminalId()));
		setArticulated(model.getArticulated());
		setNotes(model.getNotes());
		setIncident(model.getIncident());
		if (model.getBirthday()!=null) {
			setBirthday(DateUtils.sqlDateToString(model.getBirthday()));	
		}
		if (model.getAodt()!=null) {
			setAodt(DateUtils.sqlDateToString(model.getAodt()));
		}
		if (model.getAge()>0) {
			setAge(String.valueOf(model.getAge()));
		}
	}
	
	public DriverTraining populateModel () throws Exception {
		DriverTraining model = new DriverTraining();
		model.setId(getId());
		model.setDriverId(Integer.parseInt(getDriverId()));
		if (getTraining1ExpiryDate()!=null && getTraining1ExpiryDate().trim().length()>1) {
			model.setTraining1ExpiryDate(DateUtils.strToSQLDate(getTraining1ExpiryDate()));	
		}
		if (getTraining2ExpiryDate()!=null && getTraining2ExpiryDate().trim().length()>1) {
			model.setTraining2ExpiryDate(DateUtils.strToSQLDate(getTraining2ExpiryDate()));	
		}
		if (getTraining3ExpiryDate()!=null && getTraining3ExpiryDate().trim().length()>1) {
			model.setTraining3ExpiryDate(DateUtils.strToSQLDate(getTraining3ExpiryDate()));	
		}
		if (getFile()!=null && getFile().getFileSize() > 0) {
			
			String filePath = getServlet().getServletContext().getRealPath("/") +"upload";
			String fileName = file.getFileName();
			
			if(!("").equals(fileName)){  
		    	
		        File newFile = new File(filePath, fileName);
	              
		        if(!newFile.exists()){
		        	TransportUtils.uploadPic(newFile, file);
		        }  
		        
		        model.setPicName(getFile().getFileName());
		        model.setPic(newFile);
		    }
				
		}
		model.setVnv(getVnv());
		model.setIncab(getIncab());
		model.setSpotcheck(getSpotcheck());
		model.setTerminalId(Integer.parseInt(getTerminalId()));
		model.setArticulated(getArticulated());
		model.setNotes(getNotes());
		model.setIncident(getIncident());
		if (getBirthday()!=null && getBirthday().trim().length()>1) {
			model.setBirthday(DateUtils.strToSQLDate(getBirthday()));	
		}
		if (getAodt()!=null  && getAodt().trim().length()>1) {
			model.setAodt(DateUtils.strToSQLDate(getAodt()));
		}
		return model;
	}
	
	public void populateDropdownList(HttpServletRequest request, boolean isEdit) throws Exception{
        //get Transport from Session
		populateTerminalList(request);
		populateDriverList(request);
	}
	
	public void populateDropdownListFromSession(HttpServletRequest request, boolean isEdit) throws Exception{
    	populateDropdownList(request, isEdit);
	}
	

	public void populateTerminalList(HttpServletRequest request) throws Exception{        
		//get the lorry list
        HashMap<String,Object> dataMap = new HashMap<String, Object>();
		dataMap.put(MapConstant.MODULE, ModuleConstant.TERMINAL);
		dataMap.put(MapConstant.ACTION, ActionConstant.GET_ACTIVE_DATA);
		ServiceManager service = new ServiceManagerImpl();
		Map<String, Object> resultMap = service.executeRequest(dataMap);
        
        if (resultMap!=null && !resultMap.isEmpty()) {
			@SuppressWarnings("unchecked")
			List<Terminal> qryList =  (ArrayList<Terminal>) resultMap.get(MapConstant.CLASS_LIST);		        		
			setTerminalList(qryList);
        	if (request.getSession().getAttribute(MiscConstant.TRANS_TERMINAL_LIST)!=null) {
        		request.getSession().removeAttribute(MiscConstant.TRANS_TERMINAL_LIST);
        	}
        	//save to session
        	request.getSession().setAttribute(MiscConstant.TRANS_TERMINAL_LIST, qryList);
        }
		
        dataMap = null;
        service = null;
        resultMap = null;
        
	}
	
	public void populateDriverList(HttpServletRequest request) throws Exception{        
		//get the mechanic list
        HashMap<String,Object> dataMap = new HashMap<String, Object>();
		dataMap = new HashMap<String, Object>();
		dataMap.put(MapConstant.MODULE, ModuleConstant.EMPLOYEE);
		dataMap.put(MapConstant.ACTION, ActionConstant.GET_ACTIVE_DATA);
		ServiceManager service = new ServiceManagerImpl();
		Map<String, Object> resultMap = service.executeRequest(dataMap);
        
        if (resultMap!=null && !resultMap.isEmpty()) {
			@SuppressWarnings("unchecked")
			List<Employee> qryList =  (List<Employee>) resultMap.get(MapConstant.CLASS_LIST);		        		
        	//customize here get the mechanic only
			List<Employee> customList =  new ArrayList<>();
			
			for (Employee item: qryList) {
				if (item.getEmpCategory().equalsIgnoreCase(MiscConstant.LOV_EMPCATEGORY_DRIVER)) {
					customList.add(item);
				}
			}
	
			setDriverList(customList);
        	if (request.getSession().getAttribute(MiscConstant.TRANS_DRIVER_LIST)!=null) {
        		request.getSession().removeAttribute(MiscConstant.TRANS_DRIVER_LIST);
        	}
        	//save to session
        	request.getSession().setAttribute(MiscConstant.TRANS_DRIVER_LIST, customList);
        }
        
        dataMap = null;
        service = null;
        resultMap = null;
        
	}

	
	
	@Override
	public ActionErrors validate(ActionMapping mapping,
			HttpServletRequest request) {
		// TODO Auto-generated method stub
		ActionErrors errors = new ActionErrors();
		
		String command = (String) request.getParameter("command"); 
		
		if (command!=null && (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE) || command.equalsIgnoreCase(ParamConstant.AJAX_UPDATE))) {
			boolean flag = false;
			boolean isEdit = (command.equalsIgnoreCase(ParamConstant.AJAX_UPDATE)? true: false);
			if (this.getDriverId()==null || this.getDriverId().trim().equals("0")) {
				errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage("mf.driver.req"));
				flag = true;
			}
			if (this.getTerminalId()==null || this.getTerminalId().trim().equals("0")) {
				errors.add(ActionErrors.GLOBAL_MESSAGE, new ActionMessage("mf.terminalname.req"));
				flag = true;
			}
			
			if (flag) {
				try {
					//get list from session
					populateDropdownListFromSession(request, isEdit);		
							
				} catch(Exception e) {}				
			}

	
		} 
	
		return errors;
	}


	public String getDriverId() {
		return driverId;
	}


	public void setDriverId(String driverId) {
		this.driverId = driverId;
	}


	public String getTraining1ExpiryDate() {
		return training1ExpiryDate;
	}


	public void setTraining1ExpiryDate(String training1ExpiryDate) {
		this.training1ExpiryDate = training1ExpiryDate;
	}


	public String getTraining2ExpiryDate() {
		return training2ExpiryDate;
	}


	public void setTraining2ExpiryDate(String training2ExpiryDate) {
		this.training2ExpiryDate = training2ExpiryDate;
	}


	public String getTraining3ExpiryDate() {
		return training3ExpiryDate;
	}


	public void setTraining3ExpiryDate(String training3ExpiryDate) {
		this.training3ExpiryDate = training3ExpiryDate;
	}

	public String getVnv() {
		return vnv;
	}


	public void setVnv(String vnv) {
		this.vnv = vnv;
	}


	public String getIncab() {
		return incab;
	}


	public void setIncab(String incab) {
		this.incab = incab;
	}


	public String getSpotcheck() {
		return spotcheck;
	}


	public void setSpotcheck(String spotcheck) {
		this.spotcheck = spotcheck;
	}


	public String getTerminalId() {
		return terminalId;
	}


	public void setTerminalId(String terminalId) {
		this.terminalId = terminalId;
	}


	public String getArticulated() {
		return articulated;
	}


	public void setArticulated(String articulated) {
		this.articulated = articulated;
	}


	public String getNotes() {
		return notes;
	}


	public void setNotes(String notes) {
		this.notes = notes;
	}


	public String getIncident() {
		return incident;
	}


	public void setIncident(String incident) {
		this.incident = incident;
	}


	public String getBirthday() {
		return birthday;
	}


	public void setBirthday(String birthday) {
		this.birthday = birthday;
	}


	public String getAodt() {
		return aodt;
	}


	public void setAodt(String aodt) {
		this.aodt = aodt;
	}


	public String getSearchValue() {
		return searchValue;
	}


	public void setSearchValue(String searchValue) {
		this.searchValue = searchValue;
	}


	public List<Terminal> getTerminalList() {
		return terminalList;
	}


	public void setTerminalList(List<Terminal> terminalList) {
		this.terminalList = terminalList;
	}


	public List<Employee> getDriverList() {
		return driverList;
	}


	public void setDriverList(List<Employee> driverList) {
		this.driverList = driverList;
	}


	public String getCategory() {
		return category;
	}


	public void setCategory(String category) {
		this.category = category;
	}


	public FormFile getFile() {
		return file;
	}


	public void setFile(FormFile file) {
		this.file = file;
	}


	public String getPicStr() {
		return picStr;
	}


	public void setPicStr(String picStr) {
		this.picStr = picStr;
	}


	public String getAge() {
		return age;
	}


	public void setAge(String age) {
		this.age = age;
	}

	

}
