package com.transport.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.transport.constant.ActionConstant;
import com.transport.constant.MapConstant;
import com.transport.constant.MiscConstant;
import com.transport.constant.ModuleConstant;
import com.transport.constant.ParamConstant;
import com.transport.form.DriverTrainingFormBean;
import com.transport.model.DriverTraining;
import com.transport.model.DriverTrainingInfo;
import com.transport.model.User;
import com.transport.service.ServiceManager;
import com.transport.service.ServiceManagerImpl;
import com.transport.util.TransportUtils;

public class DriverTrainingAction extends Action {

	private final static Logger logger = Logger.getLogger(DriverTrainingAction.class);
	
	@Override
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
		DriverTrainingFormBean formBean = (DriverTrainingFormBean) form;
        String forwardAction = ActionConstant.NONE;
		String command = request.getParameter("command");
		
		//session expired checking
		if (request.getSession().getAttribute(MiscConstant.USER_SESSION) == null) {
			forwardAction = ActionConstant.SHOW_AJAX_EXPIRED;
		} else {
			if (command!=null) {
				
				int module = ModuleConstant.DRIVER_TRAINING;
				
				if (command.equalsIgnoreCase(ParamConstant.ADD)) {
					
					//get fresh/updated list data from DB for click ADD and EDIT link
					formBean.populateDropdownList(request, false);
					
					formBean.setTransactionStatus(false);
					formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
					forwardAction = ActionConstant.SHOW_AJAX_ADD;
				} else if (command.equalsIgnoreCase(ParamConstant.ADD_INNER)) {
						
						//get fresh/updated list data from DB for click ADD and EDIT link
						formBean.populateTrainingDropdownList(request);
					
						String driverTrainingId = (String) request.getParameter("driverTrainingId");
						int innerModule = Integer.parseInt(request.getParameter("innerModule"));
						
						formBean.setDriverTrainingId(driverTrainingId);
						formBean.setInnerModule(String.valueOf(innerModule));
						
						formBean.setTransactionStatus(false);
						formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
						
						if (ModuleConstant.DRIVER_TRAINING_INFO == innerModule) {
							forwardAction = ActionConstant.SHOW_AJAX_ADD_INNER;							
						} else if (ModuleConstant.DRIVER_TRAINING_PROFILE == innerModule) {
							forwardAction = ActionConstant.SHOW_AJAX_ADD_INNER_2;			
						}

				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_EDIT)) {
					//fetch the data
					
					int id = Integer.parseInt(request.getParameter("id"));
					
					DriverTraining model = new DriverTraining();
					model.setId(id);
					
					HashMap<String,Object> dataMap = new HashMap<String, Object>();
			        dataMap.put(MapConstant.MODULE, module);
			        dataMap.put(MapConstant.CLASS_DATA, model);
			        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA);
			        
			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
					
			        if (resultMap!=null && !resultMap.isEmpty()) {
				        model =  (DriverTraining) resultMap.get(MapConstant.CLASS_DATA);		        		
			        	formBean.populateFormBean(model);
			        }
			        
			        //get fresh/updated list data from DB for click ADD and EDIT link
			        formBean.populateDropdownList(request, true);
			        
					formBean.setTransactionStatus(false);
					formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
					
					forwardAction = ActionConstant.SHOW_AJAX_EDIT;
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_EDIT_INNER)) {
					
					int innerModule = Integer.parseInt(request.getParameter("innerModule"));
					String driverName = (String) request.getParameter("driverName");
					
					formBean.setDriverName(driverName);
					
					int id = Integer.parseInt(request.getParameter("id"));
					
					DriverTrainingInfo model = new DriverTrainingInfo();
					model.setId(id);
					
					HashMap<String,Object> dataMap = new HashMap<String, Object>();
			        dataMap.put(MapConstant.MODULE, innerModule);
			        dataMap.put(MapConstant.CLASS_DATA, model);
			        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA);
			        
			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
					
			        if (resultMap!=null && !resultMap.isEmpty()) {
				        model =  (DriverTrainingInfo) resultMap.get(MapConstant.CLASS_DATA);		        		
			        	formBean.populateFormBeanInfo(model);
			        }
			        
			        //get fresh/updated list data from DB for click ADD and EDIT link
			        formBean.populateTrainingDropdownList(request);
			        
					formBean.setTransactionStatus(false);
					formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
					
					if (ModuleConstant.DRIVER_TRAINING_INFO == innerModule) {
						forwardAction = ActionConstant.SHOW_AJAX_EDIT_2;							
					} else if (ModuleConstant.DRIVER_TRAINING_PROFILE == innerModule) {
						forwardAction = ActionConstant.SHOW_AJAX_EDIT_3;			
					}
					
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE) || command.equalsIgnoreCase(ParamConstant.AJAX_UPDATE)) {
					//populateModel
					DriverTraining model = (DriverTraining) formBean.populateModel();
					
					User user = (User) request.getSession().getAttribute(MiscConstant.USER_SESSION);
					
					HashMap<String,Object> dataMap = new HashMap<String, Object>();
			        dataMap.put(MapConstant.MODULE, module);
			        dataMap.put(MapConstant.CLASS_DATA, model);
			        dataMap.put(MapConstant.USER_SESSION_DATA, user);
			        
			        if (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE)) {
				        dataMap.put(MapConstant.ACTION, ActionConstant.SAVE);
			        } else {
			        	dataMap.put(MapConstant.ACTION, ActionConstant.UPDATE);
			        }
			        
			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
			        
			        if (resultMap!=null && !resultMap.isEmpty()) {
			        	//check resultmap action status
			        	boolean tranctionStatus = (boolean) resultMap.get(MapConstant.TRANSACTION_STATUS);
	
			        	formBean.setTransactionStatus(tranctionStatus);
			        	
			        	//get the dropdown list from session
			        	boolean isEdit = (command.equalsIgnoreCase(ParamConstant.AJAX_UPDATE)? true: false);
			        	formBean.populateDropdownListFromSession(request, isEdit);  
	
			        	if (tranctionStatus) {
			        		//show success page with updated image if necessary
			        		if (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE)) {
			        			//get the id
			        			model.setId((Integer) resultMap.get(MapConstant.FIELD_CRITERIA_ENTITY_ID));
			        		}
			        		dataMap.clear();
			        		resultMap.clear();								
					        dataMap.put(MapConstant.MODULE, module);
					        dataMap.put(MapConstant.CLASS_DATA, model);
					        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA);
					        
					        resultMap = service.executeRequest(dataMap);
							
					        if (resultMap!=null && !resultMap.isEmpty()) {
						        model =  (DriverTraining) resultMap.get(MapConstant.CLASS_DATA);		        		
					        	formBean.populateFormBean(model);
					        }			    
			        		//add confirmation message        		
			        		if (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE)) {
			        			formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_SAVED);
			        			TransportUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_SAVED+" - "+module);
			        			//logger.info(MiscConstant.TRANS_MESSSAGE_SAVED);
			        		}else {
			        			formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_UPDATED);
			        			TransportUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_UPDATED+" - "+module);
			        			//logger.info(MiscConstant.TRANS_MESSSAGE_UPDATED);
			        		}
			        		forwardAction = ActionConstant.AJAX_SUCCESS;
			        	} else {
			        		formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_ERROR);
			        		//logger.info(MiscConstant.TRANS_MESSSAGE_ERROR);
			        		TransportUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_ERROR+" - "+module);
			        		forwardAction = ActionConstant.AJAX_FAILED;
			        	}
			        }
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_DELETE)) {
					//fetch the data
					
					int id = Integer.parseInt(request.getParameter("id"));
					
					User user = (User) request.getSession().getAttribute(MiscConstant.USER_SESSION);
					
					DriverTraining model = new DriverTraining();
					model.setId(id);
					
					HashMap<String,Object> dataMap = new HashMap<String, Object>();
			        dataMap.put(MapConstant.MODULE, module);
			        dataMap.put(MapConstant.CLASS_DATA, model);
			        dataMap.put(MapConstant.ACTION, ActionConstant.DELETE);
			        dataMap.put(MapConstant.USER_SESSION_DATA, user);
			        
			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
					
			        if (resultMap!=null && !resultMap.isEmpty()) {
			        	//check resultmap action status
			        	boolean tranctionStatus = (boolean) resultMap.get(MapConstant.TRANSACTION_STATUS);
	
			        	formBean.setTransactionStatus(tranctionStatus);
			        	
			        	if (tranctionStatus) {
			        		//show success page
			        		//add confirmation message
			        		formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_DELETED);
	
			        		//logger.info(MiscConstant.TRANS_MESSSAGE_DELETED);
			        		TransportUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_DELETED+" - "+module);
			        		forwardAction = ActionConstant.AJAX_SUCCESS;
			        	} else {
			        		formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_ERROR);
			        		//logger.info(MiscConstant.TRANS_MESSSAGE_ERROR);
			        		TransportUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_ERROR+" - "+module);
			        		forwardAction = ActionConstant.AJAX_FAILED;
			        	}
			        }
	
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_SEARCH)) {
					//get all the records from DB
									
					 int page = 1;
				     if(request.getParameter("page") != null) {
				         page = Integer.parseInt(request.getParameter("page")); 
				     }
				     
				    int offset = (page-1) * MiscConstant.RECORDS_PER_PAGE; 
				    
					String category = null;
					 if(request.getParameter("category") != null) {
						 category=(String) request.getParameter("category");
						 formBean.setCategory(category);
						 if (category.equals("filter")) {
							 category = ActionConstant.SEARCHBY;
						 } else {
							 category = ActionConstant.SEARCHALL;
						 }
					} 
					  
					String searchValue = formBean.getSearchValue();
	
					HashMap<String,Object> dataMap = new HashMap<String, Object>();
					dataMap.put(MapConstant.SEARCH_CRITERIA, searchValue);
			        dataMap.put(MapConstant.MODULE, module);
				    dataMap.put(MapConstant.ACTION, category);
				    dataMap.put(MapConstant.PAGINATION_LIMIT, MiscConstant.RECORDS_PER_PAGE);
				    dataMap.put(MapConstant.PAGINATION_OFFSET, offset);
	
			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
			        
			        if (resultMap!=null && !resultMap.isEmpty()) {
				        
						@SuppressWarnings("unchecked")
						List<DriverTraining> qryList =  (List<DriverTraining>) resultMap.get(MapConstant.CLASS_LIST);		        		
	
			        	formBean.setModelList(qryList);
			        	
			        	int totalNoOfRecords = (int) resultMap.get(MapConstant.PAGINATION_TOTALRECORDS);
			            int noOfPages = (int) Math.ceil(totalNoOfRecords * 1.0 / MiscConstant.RECORDS_PER_PAGE);
						
			            formBean.setNoOfPages(noOfPages);
			            formBean.setCurrentPage(page);
			            
			        } else {
			        	formBean.setModelList(null);
			            formBean.setNoOfPages(0);
			            formBean.setCurrentPage(0);
			        }
			        
			        forwardAction = ActionConstant.SHOW_AJAX_TABLE;
			
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_VIEW)) {
					//fetch the data
					
					int driverId = Integer.parseInt(request.getParameter("driverId"));
					
					DriverTraining model = new DriverTraining();
					model.setDriverId(driverId);
					
					HashMap<String,Object> dataMap = new HashMap<String, Object>();
			        dataMap.put(MapConstant.MODULE, module);
			        dataMap.put(MapConstant.CLASS_DATA, model);
			        dataMap.put(MapConstant.ACTION, ActionConstant.GET_DATA_BY_CRITERIA);
			        
			        ServiceManager service = new ServiceManagerImpl();
			        Map<String, Object> resultMap = service.executeRequest(dataMap);
					
			        if (resultMap!=null && !resultMap.isEmpty()) {
				        model =  (DriverTraining) resultMap.get(MapConstant.CLASS_DATA);		        		
			        	formBean.populateFormBean(model);
			        }
			        
			        //get fresh/updated list data from DB for click ADD and EDIT link
			        formBean.populateDropdownList(request, true);
			        
					formBean.setTransactionStatus(true);
					formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_RESET);
					
					forwardAction = ActionConstant.SHOW_AJAX_VIEW;
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_GO_TO)) {
					//Check Inner Module
					//251 - Driver Info, 252-Driver Profile

					int driverTrainingId = Integer.parseInt(request.getParameter("driverTrainingId"));
					String driverName = (String) request.getParameter("driverName");
					int innerModule = Integer.parseInt(request.getParameter("innerModule"));
					
					if (ModuleConstant.DRIVER_TRAINING_INFO == innerModule) {
						DriverTrainingInfo model = new DriverTrainingInfo();
						model.setDriverTrainingId(driverTrainingId);
						model.setDriverName(driverName);
					
						int page = 1;
					    int offset = (page-1) * MiscConstant.RECORDS_PER_PAGE;
						HashMap<String,Object> dataMap = new HashMap<String, Object>();
				        dataMap.put(MapConstant.MODULE, innerModule);
					    dataMap.put(MapConstant.ACTION,  ActionConstant.SEARCHALL);
					    dataMap.put(MapConstant.CLASS_DATA, model);
					    dataMap.put(MapConstant.PAGINATION_LIMIT, MiscConstant.RECORDS_PER_PAGE);
					    dataMap.put(MapConstant.PAGINATION_OFFSET, offset);
		
				        ServiceManager service = new ServiceManagerImpl();
				        Map<String, Object> resultMap = service.executeRequest(dataMap);
				        
				        if (resultMap!=null && !resultMap.isEmpty()) {
					        
							@SuppressWarnings("unchecked")
							List<DriverTrainingInfo> qryList =  (List<DriverTrainingInfo>) resultMap.get(MapConstant.CLASS_LIST);		        		
		
				        	formBean.setTrainingList(qryList);
				        	
				        	int totalNoOfRecords = (int) resultMap.get(MapConstant.PAGINATION_TOTALRECORDS);
				            int noOfPages = (int) Math.ceil(totalNoOfRecords * 1.0 / MiscConstant.RECORDS_PER_PAGE);
							
				            formBean.setNoOfPages(noOfPages);
				            formBean.setCurrentPage(1);//default to page 1
				            
				           
				        } else {
				        	formBean.setTrainingList(null);
				            formBean.setNoOfPages(0);
				            formBean.setCurrentPage(0);
				        }
						
				        forwardAction = ActionConstant.SHOW_AJAX_GO_TO;	//For 251 Driver Info					
						
					} else if (ModuleConstant.DRIVER_TRAINING_PROFILE == innerModule) {
						

						
						
						forwardAction = ActionConstant.SHOW_AJAX_GO_TO_2;	//For 252 Driver Profile
					}
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE_INNER) || command.equalsIgnoreCase(ParamConstant.AJAX_UPDATE_INNER)) {
					
					String driverTrainingId = (String) request.getParameter("driverTrainingId");
					String driverName = (String) request.getParameter("driverName");
					int innerModule = Integer.parseInt(request.getParameter("innerModule"));
					
					formBean.setDriverTrainingId(driverTrainingId);
					formBean.setDriverName(driverName);
					formBean.setInnerModule(String.valueOf(innerModule));
					
					if (ModuleConstant.DRIVER_TRAINING_INFO == innerModule) {
						//populateModel
						DriverTrainingInfo model = (DriverTrainingInfo) formBean.populateModelInfo();
						
						User user = (User) request.getSession().getAttribute(MiscConstant.USER_SESSION);
						
						HashMap<String,Object> dataMap = new HashMap<String, Object>();
				        dataMap.put(MapConstant.MODULE, innerModule);
				        dataMap.put(MapConstant.CLASS_DATA, model);
				        dataMap.put(MapConstant.USER_SESSION_DATA, user);
				        
				        if (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE_INNER)) {
					        dataMap.put(MapConstant.ACTION, ActionConstant.SAVE);
				        } else {
				        	dataMap.put(MapConstant.ACTION, ActionConstant.UPDATE);
				        }
				        
				        ServiceManager service = new ServiceManagerImpl();
				        Map<String, Object> resultMap = service.executeRequest(dataMap);
				        
				        if (resultMap!=null && !resultMap.isEmpty()) {
				        	//check resultmap action status
				        	boolean tranctionStatus = (boolean) resultMap.get(MapConstant.TRANSACTION_STATUS);
		
				        	formBean.setTransactionStatus(tranctionStatus);
				        	
				        	//get the dropdown list from session
				        	formBean.populateTrainingDropdownList(request);  
		
				        	if (tranctionStatus) {
				        		//add confirmation message        		
				        		if (command.equalsIgnoreCase(ParamConstant.AJAX_SAVE_INNER)) {
				        			formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_SAVED);
				        			TransportUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_SAVED+" - "+module);
				        			//logger.info(MiscConstant.TRANS_MESSSAGE_SAVED);
				        		}else {
				        			formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_UPDATED);
				        			TransportUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_UPDATED+" - "+module);
				        			//logger.info(MiscConstant.TRANS_MESSSAGE_UPDATED);
				        		}
				        		forwardAction = ActionConstant.AJAX_SUCCESS;
				        	} else {
				        		formBean.setTransactionMessage(MiscConstant.TRANS_MESSSAGE_ERROR);
				        		//logger.info(MiscConstant.TRANS_MESSSAGE_ERROR);
				        		TransportUtils.writeLogInfo(logger, MiscConstant.TRANS_MESSSAGE_ERROR+" - "+module);
				        		forwardAction = ActionConstant.AJAX_FAILED;
				        	}
				        }
		
					} else if (ModuleConstant.DRIVER_TRAINING_PROFILE == innerModule) {
						
					}
					
				} else if (command.equalsIgnoreCase(ParamConstant.AJAX_SEARCH_INNER)) {
					//get all the records from DB
					
					 int page = 1;
				     if(request.getParameter("page") != null) {
				         page = Integer.parseInt(request.getParameter("page")); 
				     }
				     
				    int offset = (page-1) * MiscConstant.RECORDS_PER_PAGE; 
				    
					String category = null;
					 if(request.getParameter("category") != null) {
						 category=(String) request.getParameter("category");
						 formBean.setCategory(category);
						 if (category.equals("filter")) {
							 category = ActionConstant.SEARCHBY;
						 } else {
							 category = ActionConstant.SEARCHALL;
						 }
					} 
					  
					String searchValue = formBean.getSearchValue();
	
					String driverTrainingId = (String) request.getParameter("driverTrainingId");
					String driverName = (String) request.getParameter("driverName");
					int innerModule = Integer.parseInt(request.getParameter("innerModule"));
					
					DriverTrainingInfo model = new DriverTrainingInfo();
					model.setDriverTrainingId(Integer.valueOf(driverTrainingId));
					
					formBean.setDriverTrainingId(driverTrainingId);
					formBean.setDriverName(driverName);
					formBean.setInnerModule(String.valueOf(innerModule));

					if (ModuleConstant.DRIVER_TRAINING_INFO == innerModule) {
						HashMap<String,Object> dataMap = new HashMap<String, Object>();
						dataMap.put(MapConstant.SEARCH_CRITERIA, searchValue);
				        dataMap.put(MapConstant.MODULE, innerModule);
					    dataMap.put(MapConstant.ACTION, category);
					    dataMap.put(MapConstant.PAGINATION_LIMIT, MiscConstant.RECORDS_PER_PAGE);
					    dataMap.put(MapConstant.PAGINATION_OFFSET, offset);
					    dataMap.put(MapConstant.CLASS_DATA, model);
		
				        ServiceManager service = new ServiceManagerImpl();
				        Map<String, Object> resultMap = service.executeRequest(dataMap);
				        
				        if (resultMap!=null && !resultMap.isEmpty()) {
					        
							@SuppressWarnings("unchecked")
							List<DriverTrainingInfo> qryList =  (List<DriverTrainingInfo>) resultMap.get(MapConstant.CLASS_LIST);		        		
		
				        	formBean.setTrainingList(qryList);
				        	
				        	int totalNoOfRecords = (int) resultMap.get(MapConstant.PAGINATION_TOTALRECORDS);
				            int noOfPages = (int) Math.ceil(totalNoOfRecords * 1.0 / MiscConstant.RECORDS_PER_PAGE);
							
				            formBean.setNoOfPages(noOfPages);
				            formBean.setCurrentPage(page);
				            
				        } else {
				        	formBean.setTrainingList(null);
				            formBean.setNoOfPages(0);
				            formBean.setCurrentPage(0);
				        }
	
					} else if (ModuleConstant.DRIVER_TRAINING_PROFILE == innerModule) {
						
					}
						
					
								        
			        forwardAction = ActionConstant.SHOW_AJAX_TABLE;
			
				}
			} else {
				//show main screen
				 forwardAction = ActionConstant.SHOW_AJAX_MAIN;
			}
			
		}
		
		return mapping.findForward(forwardAction);
	}	

	
	
	
}
